<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GBCMD" resourceRoot="${projectDir}" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config">
	<con:settings/>
	<con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ESPI Resources" type="rest" id="67592114-eb87-42a5-87f1-4c996a14c5da" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:definitionCache type="TEXT" rootPart=""/><con:resource name="resource" path="${#Project#resourceUri}" id="58456799-b780-49f8-bfec-ecb0dcda8a7d">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>Authorization</con:name>
					<con:value>Bearer ${#Project#data_custodian_access_token}</con:value>
					<con:style>HEADER</con:style>
					<con:default>Bearer ${#Project#data_custodian_access_token}</con:default>
				</con:parameter>
				<con:parameter>
					<con:name>Content-Type</con:name>
					<con:value>Application/atom+xml</con:value>
					<con:style>HEADER</con:style>
					<con:default>Application/atom+xml</con:default>
				</con:parameter>
			</con:parameters>
			<con:resource name="IntervalBlock" path="IntervalBlock" id="be0213b2-9ac2-43e2-b28c-aafea338b051">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{intervalBlockId}" path="{intervalBlockId}" id="acefa865-1a9e-4c58-bca5-bef8addc24e7">
					<con:settings/>
					<con:method name="Get root IntervalBlock" method="GET" id="20588ce2-a0fc-4a5e-a7c5-0d5fdf090e96">
						<con:settings/>
						<con:parameters/>
						<con:request name="Get root IntervalBlock" mediaType="application/json" id="df109c2a-8686-44f2-a9a1-024b74d4febe">
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>intervalBlockId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
						</con:request>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
					</con:method>
					<con:parameters>
						<con:parameter>
							<con:name>intervalBlockId</con:name>
							<con:value>${#Project#intervalBlockId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#intervalBlockId}</con:default>
						</con:parameter>
					</con:parameters>
				</con:resource>
				<con:method name="Get root IntervalBlock feed" method="GET" id="beccd8b0-5458-45ed-b749-05deeb0aff07">
					<con:settings/>
					<con:parameters/>
					<con:request name="Get root IntervalBlock feed" mediaType="application/json" id="a18df4c5-7ab8-48df-a1cd-c93a24d883a6">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/IntervalBlock</con:originalUri>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
					</con:request>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
						<con:status>500</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
				</con:method>
			</con:resource>
			<con:resource name="UsagePoint" path="UsagePoint" id="6aed094e-2f99-4838-8d1f-1ea2d81b1587">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{usagePointId}" path="{usagePointId}" id="e7a05c43-0a9e-4c54-9e7b-7a6e4a343604">
					<con:settings/>
					<con:method name="Get UsagePoint by Id" method="GET" id="6baab186-e083-4fe1-821d-6df676e2fdd4">
						<con:settings/>
						<con:parameters/>
						<con:request name="Get root UsagePoint" mediaType="application/json" id="93c02402-db4a-45c8-aff5-5d593b30e2f2">
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/UsagePoint/1</con:originalUri><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:parameterOrder>
								<con:entry>usagePointId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>400</con:status>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
					</con:method>
					<con:parameters>
						<con:parameter>
							<con:name>usagePointId</con:name>
							<con:value>${#Project#usagePointId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#usagePointId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="Delete" method="DELETE" id="b1251595-7747-4bcd-849b-d9997849d5fb">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="5b353840-3ab4-4be9-a707-3e3354ed6e83">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>usagePointId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Put" method="PUT" id="196e11c2-1a4e-44c2-a484-eca82c673b3f">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>application/json</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="72c2311a-edbf-424f-bc1d-26bd202f5e1e">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>usagePointId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="Get root UsagePoint feed" method="GET" id="13cfddb7-fbee-4ce4-8fcb-128edc822c9c">
					<con:settings/>
					<con:parameters/>
					<con:request name="Get root UsagePoint feed" mediaType="application/json" id="088d8604-6450-4180-a903-a25c66d6997b">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/UsagePoint</con:originalUri>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
					</con:request>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
						<con:status>500</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=utf-8</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json;charset=UTF-8</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:usag="http://localhost/DataCustodian/espi/1_1/resource/UsagePoint">usag:Fault</con:element>
					</con:representation>
				</con:method>
				<con:method name="Post" method="POST" id="60a953d3-6053-46db-8bad-167f7c1b347f">
					<con:settings/>
					<con:parameters/>
					<con:representation type="REQUEST">
						<con:mediaType>application/json</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=utf-8</con:mediaType>
						<con:status>415</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/xml+atom</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="569780c9-018b-4b87-87ef-72cd4ca64360">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/>
   <ns3:title>Front Electric Meter</ns3:title>
   <ns3:content>
      <espi:UsagePoint>
         <espi:ServiceCategory>
            <espi:kind>0</espi:kind>
         </espi:ServiceCategory>
      </espi:UsagePoint>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/UsagePoint</con:originalUri>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="MeterReading" path="MeterReading" id="2f8b8dea-c961-492c-b98b-f242e2305d30">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{meterReadingId}" path="{meterReadingId}" id="e7fcf200-7bfd-4b08-a5cc-c269e14cd241">
					<con:settings/>
					<con:method name="Get MeterReading by Id" method="GET" id="1fd04195-59f0-4a18-8de3-c064091bef1b">
						<con:settings/>
						<con:parameters/>
						<con:request name="Get root MeterReading" mediaType="application/json" id="235b1bd9-4a58-461d-b8ab-ebd7f40e2023">
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>meterReadingId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
						</con:request>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
					</con:method>
					<con:parameters>
						<con:parameter>
							<con:name>meterReadingId</con:name>
							<con:value>${#Project#meterReadingId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#meterReadingId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="Delete" method="DELETE" id="69ae7f76-298c-44d5-b8df-c75a8f84a32d">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="f75247ab-e031-47ec-ae2f-a4437565180e">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>meterReadingId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Put" method="PUT" id="62b76eb8-0014-49c2-b9db-c3eff28bf2aa">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>application/json</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="55e82d1c-05af-4085-8d6c-69f7fc61bf67">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>meterReadingId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="Get root MeterReading feed" method="GET" id="61872680-b0d4-4b37-9817-76470967a869">
					<con:settings/>
					<con:parameters/>
					<con:request name="Get root MeterReading feed" mediaType="application/json" id="ae1bf169-87ef-4ce7-961d-8c8da11dc074">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
					</con:request>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
				<con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>401 403</con:status><con:params/><con:element xmlns:met="https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading">met:Fault</con:element></con:representation></con:method>
				<con:method name="Post" method="POST" id="1e0294a1-297d-4e84-81d4-15a177af4692">
					<con:settings/>
					<con:parameters/>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/json</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>415</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/atom+xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element></con:representation><con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="b84cdeca-c422-41a3-b378-7d4ddbe41b32">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading" rel="up"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
   <ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
   <ns3:content>
      <espi:MeterReading/>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="ReadingType" path="ReadingType" id="c20eb6ba-74ff-4a8b-9028-1db6dc6b19b6">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{readingTypeId}" path="{readingTypeId}" id="57593c76-6a0a-4cec-89e6-4948389dc91b">
					<con:settings/>
					<con:method name="Get ReadingType by Id" method="GET" id="0f119777-c966-4137-afa6-848b3c2baadb">
						<con:settings/>
						<con:parameters/>
						<con:request name="Get root ReadingType" mediaType="application/json" id="8a301fd3-0ea4-46bb-b3bd-6d934d52b57c">
							<con:encoding/>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>readingTypeId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
						</con:request>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>400</con:status>
							<con:params/>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
					</con:method>
					<con:parameters>
						<con:parameter>
							<con:name>readingTypeId</con:name>
							<con:value>${#Project#readingTypeId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#readingTypeId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="Delete" method="DELETE" id="f808e9c9-5421-4464-8809-932515e84fa2">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="cb17ddcb-e0e4-4dc7-a381-e77eb9baa504">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>readingTypeId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Put" method="PUT" id="fb925c4e-30f9-4d61-938d-0957bd92b8d1">
						<con:settings/>
						<con:parameters/>
						<con:representation type="REQUEST">
							<con:mediaType>application/json</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="77ee6813-3498-4b87-841b-894784c2311c">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>readingTypeId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="Get root ReadingType feed" method="GET" id="d8cbd073-7374-4e64-a980-f25201aff2b1">
					<con:settings/>
					<con:parameters/>
					<con:request name="Get root ReadingType feed" mediaType="application/json" id="b16590e5-f966-4442-be59-1354fbfc5c43">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadingType</con:originalUri>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
					</con:request>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json;charset=UTF-8</con:mediaType>
						<con:status>403</con:status>
						<con:params/>
						<con:element xmlns:read="http://localhost/DataCustodian/espi/1_1/resource/ReadingType">read:Fault</con:element>
					</con:representation>
				</con:method>
				<con:method name="Post" method="POST" id="fc093f99-064c-41c6-a379-759eba362575">
					<con:settings/>
					<con:parameters/>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/json</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="457daa70-5be1-461a-b9d6-0ad64e3e0c5c">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:3430B025-65D5-493A-BEC2-053603C91CD7</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType" rel="up"/>
   <ns3:title>Type of Meter Reading Data</ns3:title>
   <ns3:content>
      <espi:ReadingType>
         <espi:accumulationBehaviour>4</espi:accumulationBehaviour>
         <espi:commodity>1</espi:commodity>
         <espi:currency>840</espi:currency>
         <espi:dataQualifier>12</espi:dataQualifier>
         <espi:flowDirection>1</espi:flowDirection>
         <espi:intervalLength>900</espi:intervalLength>
         <espi:kind>12</espi:kind>
         <espi:phase>769</espi:phase>
         <espi:powerOfTenMultiplier>0</espi:powerOfTenMultiplier>
         <espi:timeAttribute>0</espi:timeAttribute>
         <espi:uom>72</espi:uom>
         <espi:interharmonic>
            <espi:numerator>600</espi:numerator>
            <espi:denominator>800</espi:denominator>
         </espi:interharmonic>
         <espi:argument>
            <espi:numerator>1</espi:numerator>
            <espi:denominator>2</espi:denominator>
         </espi:argument>
      </espi:ReadingType>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="Batch" path="Batch" id="162ebb8e-556a-4b56-9060-704ec7b36fe1">
				<con:settings/>
				<con:parameters/>
				<con:resource name="Subscription" path="Subscription" id="659b7777-8fcd-4643-8033-d4c7f0c32a5e">
					<con:settings/>
					<con:parameters/>
					<con:resource name="{subscriptionID}" path="{subscriptionID}" id="03092ec7-0ac7-4e84-aa3b-6a47b7f344cd">
						<con:settings/>
						<con:resource name="UsagePoint" path="UsagePoint" id="92ef6e6f-33d8-476d-b93e-378467827e60">
							<con:settings/>
							<con:parameters/>
							<con:resource name="{usagePointId}" path="{usagePointId}" id="0e3ad8de-92fd-4891-a85b-e691a627fe76">
								<con:settings/>
								<con:parameters>
									<con:parameter>
										<con:name>usagePointId</con:name>
										<con:value>${#Project#usagePointId}</con:value>
										<con:style>TEMPLATE</con:style>
										<con:default>${#Project#usagePointId}</con:default>
									</con:parameter>
								</con:parameters>
								<con:method name="Method 1" method="GET" id="de454589-5b62-44ae-8652-0a346e985cff">
									<con:settings/>
									<con:parameters/>
									<con:representation type="REQUEST">
										<con:mediaType>Application/atom+xml</con:mediaType>
										<con:params/>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>text/html;charset=utf-8</con:mediaType>
										<con:status>404</con:status>
										<con:params/>
										<con:element>html</con:element>
									</con:representation>
									<con:representation type="RESPONSE">
										<con:mediaType xsi:nil="true"/>
										<con:status>0</con:status>
										<con:params/>
										<con:element>data</con:element>
									</con:representation>
									<con:request name="GET {usagePointId}" mediaType="application/json" id="0d627641-1b53-4ded-9b93-2e8cd6aa01fd">
										<con:settings>
											<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
										</con:settings>
										<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
										<con:request/>
										<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5/UsagePoint/usagePointId</con:originalUri>
										<con:credentials>
											<con:authType>No Authorization</con:authType>
										</con:credentials>
										<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
										<con:jmsPropertyConfig/>
										<con:parameters>
											<entry key="usagePointId" value="${#Project#usagePointId}" xmlns="http://eviware.com/soapui/config"/>
										</con:parameters>
									</con:request>
								</con:method>
							</con:resource>
						</con:resource>
						<con:method name="Method 1" method="GET" id="3ba52762-575b-4840-967b-4970130b71b9">
							<con:settings/>
							<con:parameters/>
							<con:request name="GET {subscriptionId}" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters>
									<entry key="subscriptionID" value="${#Project#subscriptionID}" xmlns="http://eviware.com/soapui/config"/>
								</con:parameters>
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:credentials>
									<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
									<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:parameterOrder>
									<con:entry>subscriptionID</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:request>
							<con:representation type="RESPONSE">
								<con:mediaType>application/atom+xml</con:mediaType>
								<con:status>200</con:status>
								<con:params/>
								<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
								<con:status>404 500</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>application/atom+xml</con:mediaType>
								<con:status>400</con:status>
								<con:params/>
							</con:representation>
							<con:representation type="REQUEST">
								<con:mediaType>Application/atom+xml</con:mediaType>
								<con:params/>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>application/json;charset=UTF-8</con:mediaType>
								<con:status>403 401</con:status>
								<con:params/>
								<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/1">ns:Fault</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=utf-8</con:mediaType>
								<con:status>400</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType xsi:nil="true"/>
								<con:status>400</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType xsi:nil="true"/>
								<con:status>400</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>0</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType xsi:nil="true"/>
								<con:status>400</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType xsi:nil="true"/>
								<con:status>200</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType xsi:nil="true"/>
								<con:status>400</con:status>
								<con:params/>
								<con:element>data</con:element>
							</con:representation>
						</con:method>
						<con:parameters>
							<con:parameter>
								<con:name>subscriptionID</con:name>
								<con:value>${#Project#subscriptionID}</con:value>
								<con:style>TEMPLATE</con:style>
								<con:default>${#Project#subscriptionID}</con:default>
							</con:parameter>
						</con:parameters>
					</con:resource>
				</con:resource>
				<con:resource name="RetailCustomer" path="RetailCustomer" id="5a5ac7c0-a2eb-4371-9d78-9915a6c939c9">
					<con:settings/>
					<con:parameters/>
					<con:resource name="{retailCustomerId}" path="${#Project#retailCustomerId}" id="1168de76-a66e-4990-b267-83e812dde0b5">
						<con:settings/>
						<con:resource name="UsagePoint" path="UsagePoint" id="d4b77832-dcfb-466b-9353-696e7df8089c">
							<con:settings/>
							<con:parameters/>
							<con:resource name="${#Project#usagePointId}" path="${#Project#usagePointId}" id="2cecb2c5-1e7f-4567-8dbd-009e653372ec">
								<con:settings/>
								<con:parameters>
									<con:parameter>
										<con:name>#Project#usagePointId</con:name>
										<con:value>#Project#usagePointId</con:value>
										<con:style>TEMPLATE</con:style>
										<con:default>#Project#usagePointId</con:default>
									</con:parameter>
								</con:parameters>
								<con:method name="Method 1" method="GET" id="4018c599-7bf6-4f7c-be2e-65a3729b8661">
									<con:settings/>
									<con:parameters/>
									<con:representation type="RESPONSE">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>200</con:status>
										<con:params/>
										<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
									</con:representation>
									<con:request name="Request 1" mediaType="application/json" id="5a9ca99c-b901-4eda-b95d-1a1802ba90e3">
										<con:settings>
											<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
										</con:settings>
										<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
										<con:request/>
										<con:credentials>
											<con:authType>Global HTTP Settings</con:authType>
										</con:credentials>
										<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
										<con:jmsPropertyConfig/>
										<con:parameters/>
										<con:parameterOrder>
											<con:entry>retailCustomerId</con:entry>
											<con:entry>#Project#usagePointId</con:entry>
											<con:entry>Authorization</con:entry>
											<con:entry>Content-Type</con:entry>
										</con:parameterOrder>
									</con:request>
								</con:method>
							</con:resource>
							<con:method name="Method 1" method="GET" id="3e50511a-2c69-402e-81ef-a4ca1a589ae3">
								<con:settings/>
								<con:parameters/>
								<con:representation type="FAULT">
									<con:mediaType>text/html;charset=utf-8</con:mediaType>
									<con:status>405</con:status>
									<con:params/>
									<con:element>html</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType>application/atom+xml</con:mediaType>
									<con:status>200</con:status>
									<con:params/>
									<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
								</con:representation>
								<con:request name="Request 1" mediaType="application/json" id="5735dc0d-94e2-4ee8-acac-4853edea5d80">
									<con:settings>
										<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
									</con:settings>
									<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
									<con:request/>
									<con:credentials>
										<con:authType>Global HTTP Settings</con:authType>
									</con:credentials>
									<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
									<con:jmsPropertyConfig/>
									<con:parameters/>
									<con:parameterOrder>
										<con:entry>retailCustomerId</con:entry>
										<con:entry>Authorization</con:entry>
										<con:entry>Content-Type</con:entry>
									</con:parameterOrder>
								</con:request>
							</con:method>
							<con:method name="Post" method="POST" id="f6b3aefd-4ea1-4ef9-a090-57ce94b7e793">
								<con:settings/>
								<con:parameters/>
								<con:representation type="REQUEST">
									<con:mediaType>application/json</con:mediaType>
									<con:params/>
									<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
								</con:representation>
								<con:representation type="FAULT">
									<con:mediaType>text/html;charset=utf-8</con:mediaType>
									<con:status>405 415</con:status>
									<con:params/>
									<con:element>html</con:element>
								</con:representation>
								<con:representation type="REQUEST">
									<con:mediaType>application/atom+xml</con:mediaType>
									<con:params/>
									<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="REQUEST">
									<con:mediaType>application/xml</con:mediaType>
									<con:params/>
									<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>200</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0c9b6e50-3d7a-4940-b50d-7f20290474b1">
									<con:settings>
										<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
									</con:settings>
									<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
									<con:request/>
									<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/RetailCustomer/1/UsagePoint</con:originalUri>
									<con:credentials>
										<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
										<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
										<con:authType>Global HTTP Settings</con:authType>
									</con:credentials>
									<con:attachment>
										<con:name>test_usage_data.xml</con:name>
										<con:contentType>application/xml</con:contentType>
										<con:contentId>test_usage_data.xml</con:contentId>
										<con:url>../data/test_usage_data.xml</con:url>
										<con:id>a08d6407-242b-4a21-a369-cadf59fd95a7</con:id>
									</con:attachment>
									<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
									<con:jmsPropertyConfig/>
									<con:parameters/>
									<con:parameterOrder>
										<con:entry>retailCustomerId</con:entry>
										<con:entry>Authorization</con:entry>
										<con:entry>Content-Type</con:entry>
									</con:parameterOrder>
								</con:request>
							</con:method>
						</con:resource>
						<con:method name="Method 1" method="GET" id="c8f85188-48fc-4799-a79e-1efaf9aeb1b1">
							<con:settings/>
							<con:parameters/>
							<con:request name="Request 1" mediaType="application/json" id="b627cfa3-bf2c-42c7-8bdc-db241427aff7">
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters/>
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:credentials>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:parameterOrder>
									<con:entry>retailCustomerId</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:request>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
								<con:status>404</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=utf-8</con:mediaType>
								<con:status>405</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
						</con:method>
						<con:parameters>
							<con:parameter>
								<con:name>retailCustomerId</con:name>
								<con:value>retailCustomerId</con:value>
								<con:style>TEMPLATE</con:style>
								<con:default>retailCustomerId</con:default>
							</con:parameter>
						</con:parameters>
					</con:resource>
					<con:method name="Method 1" method="GET" id="167d5196-d13b-4c46-b04d-04dc7e4b1749">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>404</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="4a9566c8-8d45-4747-8de7-458b7d31261d">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:parameterOrder>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:resource name="Bulk" path="Bulk" id="a8b21b8e-acf3-4472-a829-ae4b3be6c41a">
					<con:settings/>
					<con:parameters/>
					<con:resource name="${Project#bulkId}" path="${Project#bulkId}" id="4501c6c5-44f4-4704-a44e-8877d0ff3411">
						<con:settings/>
						<con:parameters>
							<con:parameter>
								<con:name>Project#bulkId</con:name>
								<con:value>Project#bulkId</con:value>
								<con:style>TEMPLATE</con:style>
								<con:default>Project#bulkId</con:default>
							</con:parameter>
						</con:parameters>
						<con:method name="Method 1" method="GET" id="efe60fe6-f6c7-479d-b979-161e4ae7e770">
							<con:settings/>
							<con:parameters/>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
								<con:status>404</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:request name="Request 1" mediaType="application/json" id="28e01adf-7b37-4356-a821-bb3d4874919b">
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:credentials>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters/>
								<con:parameterOrder>
									<con:entry>Project#bulkId</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:request>
						</con:method>
					</con:resource>
					<con:method name="Method 1" method="GET" id="c001b3fd-29a8-45b2-8bed-29491e3cb3f1">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>404</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="941f874c-7138-441a-8a47-c3ce4ba1f2f7">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
			</con:resource>
			<con:resource name="Subscription" path="Subscription" id="42474886-37a4-43ca-a5d3-8db235c318cd">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{subscriptionId}" path="{subscriptionId}" id="dc584e5a-b904-47c8-a689-bef518d0da06">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>subscriptionId</con:name>
							<con:value>${#Project#subscriptionId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#subscriptionId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:resource name="UsagePoint" path="UsagePoint" id="fd205047-d5f4-4c30-9f84-4e1216374b8b">
						<con:settings/>
						<con:parameters/>
						<con:resource name="{usagePointId}" path="{usagePointId}" id="37aa9d50-35ca-4fbe-a6c4-b84d1942e6e0">
							<con:settings/>
							<con:parameters>
								<con:parameter>
									<con:name>usagePointId</con:name>
									<con:value>${#Project#usagePointId}</con:value>
									<con:style>TEMPLATE</con:style>
									<con:default>${#Project#usagePointId}</con:default>
								</con:parameter>
							</con:parameters>
							<con:resource name="MeterReading" path="MeterReading" id="af934b27-1654-47df-9855-d3d51436b8ec">
								<con:settings/>
								<con:parameters/>
								<con:resource name="{meterReadingId}" path="{meterReadingId}" id="c1800681-eedb-4d2a-82ec-65a67768d499">
									<con:settings/>
									<con:parameters>
										<con:parameter>
											<con:name>meterReadingId</con:name>
											<con:value>${#Project#meterReadingId}</con:value>
											<con:style>TEMPLATE</con:style>
											<con:default>${#Project#meterReadingId}</con:default>
											<con:description xsi:nil="true"/>
										</con:parameter>
									</con:parameters>
									<con:resource name="IntervalBlock" path="IntervalBlock" id="e23f80cd-05f5-4f06-adce-7d62aea058e3">
										<con:settings/>
										<con:parameters/>
										<con:resource name="{intervalBlockId}" path="{intervalBlockId}" id="7d5b42ea-3490-40b0-8a12-9281e2fc19d8">
											<con:settings/>
											<con:parameters>
												<con:parameter>
													<con:name>intervalBlockId</con:name>
													<con:value>${#Project#intervalBlockId}</con:value>
													<con:style>TEMPLATE</con:style>
													<con:default>${#Project#intervalBlockId}</con:default>
												</con:parameter>
											</con:parameters>
											<con:method name="GET IntervalBlock by Id" method="GET" id="8037a212-a1a4-4b16-a8ed-f0ec85277bf9">
												<con:settings/>
												<con:parameters/>
												<con:representation type="FAULT">
													<con:mediaType>application/json;charset=UTF-8</con:mediaType>
													<con:status>403</con:status>
													<con:params/>
													<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/MeterReading/1/IntervalBlock/1">ns:Fault</con:element>
												</con:representation>
												<con:representation type="REQUEST">
													<con:mediaType>Application/atom+xml</con:mediaType>
													<con:params/>
												</con:representation>
												<con:representation type="FAULT">
													<con:mediaType>text/html;charset=utf-8</con:mediaType>
													<con:status>400</con:status>
													<con:params/>
													<con:element>html</con:element>
												</con:representation>
												<con:representation type="FAULT">
													<con:mediaType>application/atom+xml</con:mediaType>
													<con:status>400</con:status>
													<con:params/>
												</con:representation>
												<con:representation type="RESPONSE">
													<con:mediaType>application/atom+xml</con:mediaType>
													<con:status>200</con:status>
													<con:params/>
													<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
												</con:representation>
												<con:request name="Request 1" mediaType="application/json" id="51ea6c55-6593-4533-9050-f183143318a9">
													<con:settings>
														<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
													</con:settings>
													<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
													<con:request/>
													<con:credentials>
														<con:authType>Global HTTP Settings</con:authType>
													</con:credentials>
													<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
													<con:jmsPropertyConfig/>
													<con:parameters/>
												</con:request>
											</con:method>
										</con:resource>
										<con:method name="GET IntervalBlock feed" method="GET" id="812b2424-6098-4d4e-b259-134efea53899">
											<con:settings/>
											<con:parameters/>
											<con:representation type="RESPONSE">
												<con:mediaType>application/atom+xml</con:mediaType>
												<con:status>200</con:status>
												<con:params/>
												<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
											</con:representation>
											<con:representation type="REQUEST">
												<con:mediaType>Application/atom+xml</con:mediaType>
												<con:params/>
											</con:representation>
											<con:request name="Request 1" mediaType="application/json" id="48fdca51-17f6-4ef2-b5ca-a9fbe4da5834">
												<con:settings>
													<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
												</con:settings>
												<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
												<con:request/>
												<con:credentials>
													<con:authType>Global HTTP Settings</con:authType>
												</con:credentials>
												<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
												<con:jmsPropertyConfig/>
												<con:parameters/>
											</con:request>
										</con:method>
									</con:resource>
									<con:method name="GET MeterReading by Id" method="GET" id="72a21efb-0665-4994-a4b2-7e0fd6281f70">
										<con:settings/>
										<con:parameters/>
										<con:representation type="RESPONSE">
											<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
											<con:status>200</con:status>
											<con:params/>
											<con:element>html</con:element>
										</con:representation>
										<con:representation type="REQUEST">
											<con:mediaType>Application/atom+xml</con:mediaType>
											<con:params/>
										</con:representation>
										<con:representation type="FAULT">
											<con:mediaType>application/json;charset=UTF-8</con:mediaType>
											<con:status>403</con:status>
											<con:params/>
											<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/MeterReading/1">ns:Fault</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType>application/atom+xml</con:mediaType>
											<con:status>200</con:status>
											<con:params/>
											<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
										</con:representation>
										<con:representation type="FAULT">
											<con:mediaType>application/atom+xml</con:mediaType>
											<con:status>400</con:status>
											<con:params/>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:representation type="RESPONSE">
											<con:mediaType xsi:nil="true"/>
											<con:status>0</con:status>
											<con:params/>
											<con:element>data</con:element>
										</con:representation>
										<con:request name="Request 1" mediaType="application/json" id="1e1d6af0-7ac2-4a41-956e-43b46f430b08">
											<con:settings>
												<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
											</con:settings>
											<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
											<con:request/>
											<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1</con:originalUri>
											<con:credentials>
												<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
												<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
												<con:authType>Global HTTP Settings</con:authType>
											</con:credentials>
											<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
											<con:jmsPropertyConfig/>
											<con:parameters/>
											<con:parameterOrder>
												<con:entry>Authorization</con:entry>
												<con:entry>Content-Type</con:entry>
												<con:entry>subscriptionId</con:entry>
												<con:entry>usagePointId</con:entry>
												<con:entry>meterReadingId</con:entry>
											</con:parameterOrder>
										</con:request>
									</con:method>
								</con:resource>
								<con:method name="GET MeterReading Feed" method="GET" id="09c3213a-f116-40d6-8b99-87e1ad73c1f5">
									<con:settings/>
									<con:parameters/>
									<con:representation type="REQUEST">
										<con:mediaType>Application/atom+xml</con:mediaType>
										<con:params/>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>application/json;charset=UTF-8</con:mediaType>
										<con:status>403</con:status>
										<con:params/>
										<con:element xmlns:met="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/MeterReading">met:Fault</con:element>
									</con:representation>
									<con:representation type="RESPONSE">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>200</con:status>
										<con:params/>
										<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
										<con:status>500</con:status>
										<con:params/>
										<con:element>html</con:element>
									</con:representation>
									<con:request name="Request 1" mediaType="application/json" id="f5aa923b-979f-4e19-8939-779f508ba6b3">
										<con:settings>
											<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
										</con:settings>
										<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
										<con:request/>
										<con:credentials>
											<con:authType>Global HTTP Settings</con:authType>
										</con:credentials>
										<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
										<con:jmsPropertyConfig/>
										<con:parameters/>
									</con:request>
								</con:method>
								<con:method name="POST MeterReadingFeed" method="POST" id="abdf94a7-17e5-47cd-959c-ecec1f1e6de8">
									<con:settings/>
									<con:parameters/>
									<con:representation type="REQUEST">
										<con:mediaType>application/json</con:mediaType>
										<con:params/>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>text/html;charset=utf-8</con:mediaType>
										<con:status>415</con:status>
										<con:params/>
										<con:element>html</con:element>
									</con:representation>
									<con:representation type="FAULT">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>400</con:status>
										<con:params/>
									</con:representation>
									<con:representation type="RESPONSE">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>200</con:status>
										<con:params/>
										<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
									</con:representation>
									<con:request name="Request 1" mediaType="Application/atom+xml" postQueryString="false" id="572d774c-6506-4ab8-84c4-f9f2ce4829ad">
										<con:settings>
											<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
											<con:setting id="RecordRequestRepresentations">false</con:setting>
										</con:settings>
										<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
										<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
	<ns3:id>urn:uuid:F77FBF34-A09E-4EBC-9606-FF1A59A17CAE</ns3:id>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1" rel="self"/>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading" rel="up"/>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1/MeterReading/1/IntervalBlock" rel="related"/>
	<ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ReadingType/1" rel="related"/>
	<ns3:title>Fifteen Minute Electricity Consumption</ns3:title>
	<ns3:content>
		<espi:MeterReading/>
	</ns3:content>
	<ns3:published>2012-10-24T00:00:00Z</ns3:published>
	<ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
										<con:credentials>
											<con:authType>Global HTTP Settings</con:authType>
										</con:credentials>
										<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
										<con:jmsPropertyConfig/>
										<con:parameters/>
									</con:request>
								</con:method>
							</con:resource>
							<con:resource name="ElectricPowerUsageSummary" path="ElectricPowerUsageSummary" id="2600485b-c2a9-4077-a282-fd75ea534482">
								<con:settings/>
								<con:parameters/>
								<con:resource name="{electricPowerUsageSummaryId}" path="{electricPowerUsageSummaryId}" id="421cd098-6c05-44b3-a98e-f3866baed728">
									<con:settings/>
									<con:parameters>
										<con:parameter>
											<con:name>electricPowerUsageSummaryId</con:name>
											<con:value>${#Project#electricPowerUsageSummaryId}</con:value>
											<con:style>TEMPLATE</con:style>
											<con:default>${#Project#electricPowerUsageSummaryId}</con:default>
										</con:parameter>
									</con:parameters>
									<con:method name="GET ElectricPowerUsageSummary by Id" method="GET" id="123990b2-aef3-4567-a2a5-8622bf3aa64a">
										<con:settings/>
										<con:parameters/>
										<con:representation type="REQUEST">
											<con:mediaType>Application/atom+xml</con:mediaType>
											<con:params/>
										</con:representation>
										<con:representation type="FAULT">
											<con:mediaType>application/json;charset=UTF-8</con:mediaType>
											<con:status>403</con:status>
											<con:params/>
											<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/ElectricPowerUsageSummary/1">ns:Fault</con:element>
										</con:representation>
										<con:request name="Request 1" mediaType="application/json" id="ff0f412e-7292-4186-b75d-a392bd583973">
											<con:settings>
												<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
											</con:settings>
											<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
											<con:request/>
											<con:credentials>
												<con:authType>Global HTTP Settings</con:authType>
											</con:credentials>
											<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
											<con:jmsPropertyConfig/>
											<con:parameters/>
										</con:request>
									</con:method>
								</con:resource>
								<con:method name="GET ElectricPowerUsageSummary Feed" method="GET" id="746058b5-3484-4a81-9469-7a5f97ffaeb1">
									<con:settings/>
									<con:parameters/>
									<con:representation type="REQUEST">
										<con:mediaType>Application/atom+xml</con:mediaType>
										<con:params/>
									</con:representation>
									<con:representation type="RESPONSE">
										<con:mediaType>application/atom+xml</con:mediaType>
										<con:status>200</con:status>
										<con:params/>
										<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
									</con:representation>
									<con:request name="Request 1" mediaType="application/json" id="cb83a25f-f2e1-416a-93a1-53a02d79be1f">
										<con:settings>
											<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
										</con:settings>
										<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
										<con:request/>
										<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/ElectricPowerUsageSummary</con:originalUri>
										<con:credentials>
											<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
											<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
											<con:authType>Global HTTP Settings</con:authType>
										</con:credentials>
										<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
										<con:jmsPropertyConfig/>
										<con:parameters/>
									</con:request>
								</con:method>
							</con:resource>
							<con:resource name="ElectricPowerQualitySummary" path="ElectricPowerQualitySummary" id="eb7e70a7-3a97-455c-a61c-bc1f61d8f222">
								<con:settings/>
								<con:parameters/>
								<con:resource name="{electricPowerQualitySummaryId}" path="{electricPowerQualitySummaryId}" id="2c6ad5c1-0f65-42c8-9f2e-e408cd1dc187">
									<con:settings/>
									<con:parameters>
										<con:parameter>
											<con:name>electricPowerQualitySummaryId</con:name>
											<con:value>${#Project#electricPowerQualitySummaryId}</con:value>
											<con:style>TEMPLATE</con:style>
											<con:default>${#Project#electricPowerQualitySummaryId}</con:default>
										</con:parameter>
									</con:parameters>
									<con:method name="GET ElectricPowerQualitySummary by Id" method="GET" id="637d4d01-17dd-4dcb-8e63-7c466760124b">
										<con:settings/>
										<con:parameters/>
										<con:representation type="REQUEST">
											<con:mediaType>Application/atom+xml</con:mediaType>
											<con:params/>
										</con:representation>
										<con:representation type="FAULT">
											<con:mediaType>application/json;charset=UTF-8</con:mediaType>
											<con:status>403</con:status>
											<con:params/>
											<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/1/ElectricPowerQualitySummary/1">ns:Fault</con:element>
										</con:representation>
										<con:request name="Request 1" mediaType="application/json" id="f16fba15-47fd-414c-8488-f8b1ab2c30be">
											<con:settings>
												<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
											</con:settings>
											<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
											<con:request/>
											<con:credentials>
												<con:authType>Global HTTP Settings</con:authType>
											</con:credentials>
											<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
											<con:jmsPropertyConfig/>
											<con:parameters/>
										</con:request>
									</con:method>
								</con:resource>
								<con:method name="GET ElectricPowerQualitySummary Feed" method="GET" id="6842b418-6851-4ccc-9184-90bae5edcb49">
									<con:settings/>
									<con:parameters/>
									<con:request name="Request 1" mediaType="application/json" id="1b22da35-acb2-4030-b95d-bc648b2ec666">
										<con:settings/>
										<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
										<con:request/>
										<con:credentials>
											<con:authType>Global HTTP Settings</con:authType>
										</con:credentials>
										<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
										<con:jmsPropertyConfig/>
										<con:parameters/>
									</con:request>
								</con:method>
							</con:resource>
							<con:method name="GET UsagePoint by Id" method="GET" id="e8e3fcc5-1cc9-41ec-b5e9-e82db7e53066">
								<con:settings/>
								<con:parameters/>
								<con:representation type="REQUEST">
									<con:mediaType>Application/atom+xml</con:mediaType>
									<con:params/>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
									<con:status>200</con:status>
									<con:params/>
									<con:element>html</con:element>
								</con:representation>
								<con:representation type="FAULT">
									<con:mediaType>application/json;charset=UTF-8</con:mediaType>
									<con:status>403</con:status>
									<con:params/>
									<con:element xmlns:usag="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint/usagePointId">usag:Fault</con:element>
								</con:representation>
								<con:representation type="FAULT">
									<con:mediaType>application/atom+xml</con:mediaType>
									<con:status>400</con:status>
									<con:params/>
								</con:representation>
								<con:representation type="FAULT">
									<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
									<con:status>500</con:status>
									<con:params/>
									<con:element>html</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType>application/atom+xml</con:mediaType>
									<con:status>200</con:status>
									<con:params/>
									<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>0</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>0</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:representation type="RESPONSE">
									<con:mediaType xsi:nil="true"/>
									<con:status>0</con:status>
									<con:params/>
									<con:element>data</con:element>
								</con:representation>
								<con:request name="Request 1" mediaType="application/json" id="60f67287-8953-45c9-872d-a7fc6eeb63af">
									<con:settings>
										<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
									</con:settings>
									<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
									<con:request/>
									<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1</con:originalUri>
									<con:credentials>
										<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
										<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
										<con:authType>Global HTTP Settings</con:authType>
									</con:credentials>
									<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
									<con:jmsPropertyConfig/>
									<con:parameters/>
									<con:parameterOrder>
										<con:entry>Authorization</con:entry>
										<con:entry>Content-Type</con:entry>
										<con:entry>subscriptionId</con:entry>
										<con:entry>usagePointId</con:entry>
									</con:parameterOrder>
								</con:request>
							</con:method>
						</con:resource>
						<con:method name="GET UsagePoint Feed" method="GET" id="c2f59b43-ed41-4b25-b16f-1aa588104d9b">
							<con:settings/>
							<con:parameters/>
							<con:representation type="FAULT">
								<con:mediaType>application/json;charset=UTF-8</con:mediaType>
								<con:status>403</con:status>
								<con:params/>
								<con:element xmlns:usag="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint">usag:Fault</con:element>
							</con:representation>
							<con:representation type="REQUEST">
								<con:mediaType>Application/atom+xml</con:mediaType>
								<con:params/>
							</con:representation>
							<con:representation type="RESPONSE">
								<con:mediaType>application/atom+xml</con:mediaType>
								<con:status>200</con:status>
								<con:params/>
								<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=utf-8</con:mediaType>
								<con:status>404</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:request name="Request 1" mediaType="application/json" id="19aaf2a0-c8b0-45c3-b56b-3f17a2439839">
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint</con:originalUri>
								<con:credentials>
									<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
									<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters/>
							</con:request>
						</con:method>
					</con:resource>
					<con:method name="Get" method="GET" id="15dbf30c-3387-4f52-8fcd-b3908b791fd9">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=utf-8</con:mediaType>
							<con:status>400 404</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>application/json;charset=UTF-8</con:mediaType>
							<con:status>403</con:status>
							<con:params/>
							<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Subscription/1">ns:Fault</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="871e2981-c765-4a0d-9d3b-8084e7e5825c">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1</con:originalUri>
							<con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>subscriptionId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Delete" method="DELETE" id="965fe936-fe36-4ff8-8583-94770f043ef5">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=utf-8</con:mediaType>
							<con:status>400</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="7e6b840c-c2e5-421e-8a57-920847ff73e6">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>subscriptionId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="Get" method="GET" id="a1758db0-a234-4ff7-ae63-0e7ff5741876">
					<con:settings/>
					<con:parameters/>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json;charset=UTF-8</con:mediaType>
						<con:status>401</con:status>
						<con:params/>
						<con:element xmlns:sub="http://localhost/DataCustodian/espi/1_1/resource/Subscription">sub:Fault</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:request name="Request 1" mediaType="application/json" id="27d6c598-8abd-47b4-afe3-cd96766323c9">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="ApplicationInformation" path="ApplicationInformation" id="2683f586-bfe2-47c7-a235-5206072b31fc">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{applicationInformationId}" path="{applicationInformationId}" id="c820a2d4-7187-49cd-b008-8911cb32caed">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>applicationInformationId</con:name>
							<con:value>${#Project#applicationInformationId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#applicationInformationId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="GET ApplicationInformation by Id" method="GET" id="cf176767-b657-4345-b8a6-c41203f67982">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=utf-8</con:mediaType>
							<con:status>400 404</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/atom+xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
							<con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Delete" method="DELETE" id="240c6f45-9544-4822-89b9-491016bd335e">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="9ef70ba4-9a57-4ff5-a02e-b693213d9dc0">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Put" method="PUT" id="f3a28c9f-a3e0-4f39-b82e-137bdcc415a4">
						<con:settings/>
						<con:parameters/>
						<con:representation type="REQUEST">
							<con:mediaType>application/json</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="4b7a8070-65c9-49fd-9a55-3b4671527e91">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request><![CDATA[<?xml-stylesheet type="text/xsl" href="/GreenButtonDataStyleSheet.xslt"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <id>urn:uuid:40f037af-96cd-4ce6-96f2-38bc1851a454</id>
   <title>Green Button Usage Feed</title>
   <updated>2014-02-27T19:19:08Z</updated>
   <link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="self"/>
   <ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
      <ns3:id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</ns3:id>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/1" rel="self"/>
      <ns3:title>GreenButtonData.org  DataCustodian Application</ns3:title>
      <ns3:content>
         <espi:ApplicationInformation>
            <espi:dataCustodianApplicationStatus/>
            <espi:thirdPartyNotifyUri>http://localhost:8080/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
            <espi:dataCustodianBulkRequestURI/>
            <espi:dataCustodianResourceEndpoint>http://localhost:8080/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
            <espi:thirdPartyScopeSelectionScreenURI>http://localhost:8080/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
            <espi:client_secret>secret</espi:client_secret>
            <espi:redirect_uri>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
            <espi:client_id>third_party</espi:client_id>
            <espi:scope>FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:scope>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
            <espi:thirdPartyApplicationName>Third Party (localhost)</espi:thirdPartyApplicationName>
         </espi:ApplicationInformation>
      </ns3:content>
      <ns3:published>2014-01-02T10:00:00Z</ns3:published>
      <ns3:updated>2014-01-02T10:00:00Z</ns3:updated>
   </ns3:entry>
</feed>]]></con:request>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="GET ApplicationInformation Feed" method="GET" id="39650856-2761-4c8d-93d1-e3f7a78ed83b">
					<con:settings/>
					<con:parameters/>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=utf-8</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
						<con:status>500</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json;charset=UTF-8</con:mediaType>
						<con:status>403</con:status>
						<con:params/>
						<con:element xmlns:app="http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation">app:Fault</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/json" id="02f6b5c6-3af1-4614-8b5a-ee45d6da5666">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
				<con:method name="Post" method="POST" id="103f5695-c0f1-4a9e-898c-9f77be3bc3ab">
					<con:settings/>
					<con:parameters/>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/json</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType xsi:nil="true"/>
						<con:status>400</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="7681492e-ee1c-4175-bd71-ad8c87891263">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
      <ns3:id>urn:uuid:af6e8b03-0299-467e-972a-a883ecdcc575</ns3:id>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation" rel="up"/>
      <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/ApplicationInformation/1" rel="self"/>
      <ns3:title>GreenButtonData.org  DataCustodian Application</ns3:title>
      <ns3:content>
         <espi:ApplicationInformation>
            <espi:dataCustodianApplicationStatus/>
            <espi:thirdPartyNotifyUri>http://localhost:8080/ThirdParty/espi/1_1/Notification</espi:thirdPartyNotifyUri>
            <espi:dataCustodianBulkRequestURI/>
            <espi:dataCustodianResourceEndpoint>http://localhost:8080/DataCustodian/espi/1_1/resource</espi:dataCustodianResourceEndpoint>
            <espi:thirdPartyScopeSelectionScreenURI>http://localhost:8080/ThirdParty/RetailCustomer/ScopeSelection</espi:thirdPartyScopeSelectionScreenURI>
            <espi:client_secret>secret</espi:client_secret>
            <espi:redirect_uri>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</espi:redirect_uri>
            <espi:client_id>third_party</espi:client_id>
            <espi:scope>FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:scope>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</espi:scope>
            <espi:dataCustodianId>data_custodian</espi:dataCustodianId>
            <espi:thirdPartyApplicationName>Third Party (localhost)</espi:thirdPartyApplicationName>
         </espi:ApplicationInformation>
      </ns3:content>
      <ns3:published>2014-01-02T10:00:00Z</ns3:published>
      <ns3:updated>2014-01-02T10:00:00Z</ns3:updated>
   </ns3:entry>]]></con:request>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="Authorization" path="Authorization" id="e18c37bc-c81a-47a1-ba06-8bbfe20f9fca">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{authorizationId}" path="{authorizationId}" id="afd7ea03-b51e-4a68-83f4-b597e59f045a">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>authorizationId</con:name>
							<con:value>${#Project#authorizationId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#authorizationId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="GET Authorization by Id" method="GET" id="89b81ae0-2a13-4aab-8a92-0714d7686bae">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>400</con:status>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>application/json;charset=UTF-8</con:mediaType>
							<con:status>401 403</con:status>
							<con:params/>
							<con:element xmlns:ns="http://localhost/DataCustodian/espi/1_1/resource/Authorization/1">ns:Fault</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=utf-8</con:mediaType>
							<con:status>400</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>authorizationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Delete" method="DELETE" id="8c62f14e-7d02-4445-9def-71c7ea915971">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="91a52e47-6bd1-4f6d-86f6-444e1583b6ce">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>authorizationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="GET Authorization Feed" method="GET" id="4044e8f5-4f26-4b1f-87ee-2f9e6737cd3f">
					<con:settings/>
					<con:parameters/>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:aut="http://localhost/DataCustodian/espi/1_1/resource/Authorization">aut:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="ReadServiceStatus" path="ReadServiceStatus" id="aef66a1b-7eb4-48e5-8e0c-a53530843ccb">
				<con:settings/>
				<con:parameters/>
				<con:method name="GET ServiceStatus" method="GET" id="ddb8df63-2747-439f-9d50-9faa935fc258">
					<con:settings/>
					<con:parameters/>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
						<con:status>404 500</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/json;charset=UTF-8</con:mediaType>
						<con:status>403</con:status>
						<con:params/>
						<con:element xmlns:read="http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus">read:Fault</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="LocalTimeParameters" path="LocalTimeParameters" id="88c8d501-0bbb-4412-a24a-d0bda6788c83">
				<con:settings/>
				<con:parameters>
					
				</con:parameters>
				<con:resource name="{localTimeParametersId}" path="{localTimeParametersId}" id="9b4bd4cc-1b04-4070-83f4-edd8a87aab84">
					<con:settings/>
					<con:parameters>
						<con:parameter required="false">
							<con:name>localTimeParametersId</con:name>
							<con:value>${#Project#localTimeParametersId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#localTimeParametersId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:method name="GET LocalTimeParameters by Id" method="GET" id="289c1e03-bd80-4fc0-ae06-72fa51b32693">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>400</con:status>
							<con:params/>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>500</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="992b9d02-a55d-4839-bbe9-fad896b41aeb">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters>
								<entry key="Content-Type" value="application/atom+xml" xmlns="http://eviware.com/soapui/config"/>
							</con:parameters>
							<con:parameterOrder>
								<con:entry>localTimeParametersId</con:entry>
								<con:entry>Content-Type</con:entry>
								<con:entry>Authorization</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Put" method="PUT" id="bc773f1b-a40b-447a-999b-5ad916dadf23">
						<con:settings/>
						<con:parameters/>
						<con:representation type="FAULT">
							<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
							<con:status>403</con:status>
							<con:params/>
							<con:element>html</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>application/json</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="a6c5e92e-37f7-4baf-935e-4eef88d6d894">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>Content-Type</con:entry>
								<con:entry>localTimeParametersId</con:entry>
								<con:entry>Authorization</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
					<con:method name="Delete" method="DELETE" id="3a185e53-ab89-4aec-88d2-2bb753f10e2e">
						<con:settings/>
						<con:parameters/>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>200</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="FAULT">
							<con:mediaType xsi:nil="true"/>
							<con:status>400</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType xsi:nil="true"/>
							<con:status>0</con:status>
							<con:params/>
							<con:element>data</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="ce3467de-f1e5-412f-a074-91081ffcfa7f">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:credentials>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>Content-Type</con:entry>
								<con:entry>localTimeParametersId</con:entry>
								<con:entry>Authorization</con:entry>
							</con:parameterOrder>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="GET LocalTimeParameters Feed" method="GET" id="12c4715b-00dd-4a98-a2fe-6b5d586c4f3c">
					<con:settings/>
					<con:parameters/>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:feed</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:request name="Request 1" mediaType="application/json" id="03bcb211-9b20-4f13-a3d5-ba0897166d66">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/LocalTimeParameters</con:originalUri>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Content-Type</con:entry>
							<con:entry>Authorization</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
				<con:method name="Post" method="POST" id="b4edfcb5-5f83-406f-86a9-f5c101e5f0fc">
					<con:settings/>
					<con:parameters/>
					<con:representation type="REQUEST">
						<con:mediaType>application/json</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
						<con:status>404</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>text/html;charset=utf-8</con:mediaType>
						<con:status>415 400</con:status>
						<con:params/>
						<con:element>html</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="REQUEST">
						<con:mediaType>application/xml</con:mediaType>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>0</con:status>
						<con:params/>
						<con:element>data</con:element>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:representation type="RESPONSE">
						<con:mediaType xsi:nil="true"/>
						<con:status>200</con:status>
						<con:params/>
						<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
					</con:representation>
					<con:request name="Request 1" mediaType="application/atom+xml" postQueryString="false" id="a135f049-b3ed-4eb4-9285-005f63e361d7">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request><![CDATA[<ns3:entry xmlns:espi="http://naesb.org/espi" xmlns:ns3="http://www.w3.org/2005/Atom">
   <ns3:id>urn:uuid:54C62EBE-2DB6-4D4F-B6BF-1973A079C841</ns3:id>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="self"/>
   <ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters" rel="up"/>
   <ns3:title>DST For North America</ns3:title>
   <ns3:content>
      <espi:LocalTimeParameters>
         <espi:dstEndRule>B40E2000</espi:dstEndRule>
         <espi:dstOffset>3600</espi:dstOffset>
         <espi:dstStartRule>360E2000</espi:dstStartRule>
         <espi:tzOffset>-18000</espi:tzOffset>
      </espi:LocalTimeParameters>
   </ns3:content>
   <ns3:published>2012-10-24T00:00:00Z</ns3:published>
   <ns3:updated>2012-10-24T00:00:00Z</ns3:updated>
</ns3:entry>]]></con:request>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Content-Type</con:entry>
							<con:entry>Authorization</con:entry>
						</con:parameterOrder>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="RetailCustomer" path="RetailCustomer" id="810d66a8-531f-4820-9dcf-4503d52d4f7a">
				<con:settings/>
				<con:parameters/>
				<con:resource name="{retailCustomerId}" path="{retailCustomerId}" id="1646b2d9-75b0-4fbf-b4c4-5daa3793bdfe">
					<con:settings/>
					<con:parameters>
						<con:parameter>
							<con:name>retailCustomerId</con:name>
							<con:value>${#Project#retailCustomerId}</con:value>
							<con:style>TEMPLATE</con:style>
							<con:default>${#Project#retailCustomerId}</con:default>
						</con:parameter>
					</con:parameters>
					<con:resource name="UsagePoint" path="UsagePoint" id="d97dbd23-3084-458d-815a-e9294819ffd6">
						<con:settings/>
						<con:parameters/>
						<con:method name="Method 1" method="GET" id="9ba53938-704d-49f5-9d29-3ab74965e363">
							<con:settings/>
							<con:parameters/>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=utf-8</con:mediaType>
								<con:status>404</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:representation type="REQUEST">
								<con:mediaType>Application/atom+xml</con:mediaType>
								<con:params/>
							</con:representation>
							<con:request name="Request 1" mediaType="application/json" id="e5b25e9f-f1d5-47f2-98f3-2b3b2963d21a">
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint</con:originalUri>
								<con:credentials>
									<con:authType>No Authorization</con:authType>
								</con:credentials>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters/>
							</con:request>
						</con:method>
						<con:method name="POST UsagePoint" method="POST" id="0c334c71-62b8-4b59-a3eb-78a7adfeab82">
							<con:settings/>
							<con:parameters/>
							<con:representation type="REQUEST">
								<con:mediaType>application/json</con:mediaType>
								<con:params/>
							</con:representation>
							<con:representation type="FAULT">
								<con:mediaType>text/html;charset=utf-8</con:mediaType>
								<con:status>404</con:status>
								<con:params/>
								<con:element>html</con:element>
							</con:representation>
							<con:request name="Request 1" mediaType="application/json" postQueryString="false" id="d484229e-10ed-47e1-b4d3-3e52ade32e93">
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request><![CDATA[<ns3:entry><ns3:id>urn:uuid:48C2A019-5598-4E16-B0F9-49E4FF27F5FB</ns3:id><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1" rel="self"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint" rel="up"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1/MeterReading" rel="related"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1/ElectricPowerUsageSummary" rel="related"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/RetailCustomer/9B6C7066/UsagePoint/1/ElectricPowerQualitySummary" rel="related"/><ns3:link href="http://localhost:8080/DataCustodian/espi/1_1/resource/LocalTimeParameters/1" rel="related"/><ns3:title>Front Electric Meter</ns3:title><ns3:content><espi:UsagePoint><espi:ServiceCategory><espi:kind>0</espi:kind></espi:ServiceCategory></espi:UsagePoint></ns3:content><ns3:published>2012-10-24T00:00:00Z</ns3:published><ns3:updated>2012-10-24T00:00:00Z</ns3:updated></ns3:entry>]]></con:request>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/RetailCustomer/1/UsagePoint</con:originalUri>
								<con:credentials>
									<con:authType>No Authorization</con:authType>
								</con:credentials>
								<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters/>
							</con:request>
						</con:method>
					</con:resource>
					<con:method name="Method 1" method="GET" id="abeef4db-b74f-4e9c-a5cd-419fd763f4a1">
						<con:settings/>
						<con:parameters/>
						<con:representation type="REQUEST">
							<con:mediaType>Application/atom+xml</con:mediaType>
							<con:params/>
						</con:representation>
						<con:representation type="RESPONSE">
							<con:mediaType>application/atom+xml</con:mediaType>
							<con:status>200</con:status>
							<con:params/>
							<con:element xmlns:atom="http://www.w3.org/2005/Atom">atom:entry</con:element>
						</con:representation>
						<con:request name="Request 1" mediaType="application/json" id="f6b324a6-8e3c-4d52-bf25-9ecad264eeed">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/RetailCustomer/1</con:originalUri>
							<con:credentials>
								<con:authType>No Authorization</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
						</con:request>
					</con:method>
				</con:resource>
				<con:method name="Method 1" method="GET" id="6481e274-ca61-4af8-af18-c86deb3c3c2e">
					<con:settings/>
					<con:parameters/>
					<con:request name="Request 1" mediaType="application/json" id="2e776260-3860-4db3-bf75-b848275e0c30">
						<con:settings/>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:request>
				</con:method>
			</con:resource>
			<con:resource name="ElectricPowerUsageSummary" path="ElectricPowerUsageSummary" id="530ea0c2-1fc7-44d3-a8ab-697856a17f5b">
				<con:settings/>
				<con:parameters/>
				<con:method name="GET root ElectricPowerUsageSummary feed" method="GET" id="8409becd-9089-4a76-8102-f2316ad4d7d7">
					<con:settings/>
					<con:parameters/>
					<con:representation type="REQUEST">
						<con:mediaType>Application/atom+xml</con:mediaType>
						<con:params/>
					</con:representation>
					<con:representation type="FAULT">
						<con:mediaType>application/atom+xml</con:mediaType>
						<con:status>400</con:status>
						<con:params/>
					</con:representation>
					<con:request name="GET root ElectricPowerUsageSummary feed" mediaType="application/json" id="af6162ba-715e-45f3-b293-ede3d35941c3">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ElectricPowerUsageSummary</con:originalUri>
						<con:credentials>
							<con:authType>No Authorization</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:request>
				</con:method>
			</con:resource>
		</con:resource>
		<con:endpoints>
			<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
			<con:endpoint>192.168.1.3:8080</con:endpoint>
			<con:endpoint>http://localhost:8080</con:endpoint>
		</con:endpoints>
		<con:resource name="token" path="/oauth/token" id="173e6cc8-6837-482b-b5af-a21dabf615ea">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>Authorization</con:name>
					<con:value/>
					<con:style>HEADER</con:style>
					<con:default/>
					<con:description xsi:nil="true"/>
				</con:parameter>
				<con:parameter>
					<con:name>grant_type</con:name>
					<con:value/>
					<con:style>QUERY</con:style>
					<con:default/>
					<con:description xsi:nil="true"/>
				</con:parameter>
				<con:parameter>
					<con:name>scope</con:name>
					<con:value/>
					<con:style>QUERY</con:style>
					<con:default/>
					<con:description xsi:nil="true"/>
				</con:parameter>
				<con:parameter>
					<con:name>refresh_token</con:name>
					<con:value/>
					<con:style>QUERY</con:style>
					<con:default/>
					<con:description xsi:nil="true"/>
				</con:parameter>
			</con:parameters>
			<con:method name="Client Credentials" method="POST" id="e3df8f56-fde3-4955-b286-fde4034ec188">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>application/json;charset=UTF-8</con:mediaType>
					<con:status>400 401 403</con:status>
					<con:params/>
					<con:element xmlns:tok="http://localhost/DataCustodian/oauth/token">tok:Fault</con:element>
				</con:representation>
				<con:representation type="REQUEST">
					<con:mediaType>application/json</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType>application/json;charset=UTF-8</con:mediaType>
					<con:status>200</con:status>
					<con:params/>
					<con:element xmlns:tok="http://localhost/DataCustodian/oauth/token">tok:Response</con:element>
				</con:representation>
				<con:representation type="FAULT">
					<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
					<con:status>500</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:request name="POST ThirdParty Request" mediaType="application/json" postQueryString="false" id="9ba40594-5ba1-490b-b4b8-0547108733e3">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
					<con:credentials>
						<con:username>third_party_admin</con:username>
						<con:password>secret</con:password>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
						<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
						<con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<con:entry key="Authorization" value="Basic dGhpcmRfcGFydHlfYWRtaW46c2VjcmV0"/>
						<con:entry key="scope" value="FB=34_35"/>
						<con:entry key="grant_type" value="client_credentials"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry>Authorization</con:entry>
						<con:entry>grant_type</con:entry>
						<con:entry>scope</con:entry>
						<con:entry>refresh_token</con:entry>
					</con:parameterOrder>
				</con:request>
				<con:request name="POST Upload Request" mediaType="application/json" postQueryString="false" id="e2fc290d-3c07-461e-84a1-d9a6265f0ae0">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
					<con:credentials>
						<con:username>upload_admin</con:username>
						<con:password>secret</con:password>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
						<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
						<con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<con:entry key="Authorization" value="Basic dXBsb2FkX2FkbWluOnNlY3JldA=="/>
						<con:entry key="scope" value="FB=45"/>
						<con:entry key="grant_type" value="client_credentials"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry>Authorization</con:entry>
						<con:entry>grant_type</con:entry>
						<con:entry>scope</con:entry>
						<con:entry>refresh_token</con:entry>
					</con:parameterOrder>
				</con:request>
				<con:request name="POST ThirdPartyRegistration Request" mediaType="application/json" postQueryString="false" id="c2d8f4db-dd26-4546-a99e-770d3221f363">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
					<con:credentials>
						<con:username>REGISTRATION_third_party</con:username>
						<con:password>secret</con:password>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
						<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
						<con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<con:entry key="Authorization" value="Basic UkVHSVNUUkFUSU9OX3RoaXJkX3BhcnR5OnNlY3JldA=="/>
						<con:entry key="scope" value="FB=36_40"/>
						<con:entry key="grant_type" value="client_credentials"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry>Authorization</con:entry>
						<con:entry>grant_type</con:entry>
						<con:entry>scope</con:entry>
						<con:entry/>
					</con:parameterOrder>
				</con:request>
				<con:request name="POST RefreshToken Request" mediaType="application/json" postQueryString="false" id="a6d60fe2-a999-4ee7-8f62-ef93ddbe4cb3">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<con:entry key="scope" value="FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13"/>
						<con:entry key="Authorization" value="Basic dGhpcmRfcGFydHk6c2VjcmV0"/>
						<con:entry key="grant_type" value="refresh_token"/>
						<con:entry key="refresh_token" value="2556334b-c989-47ab-8391-554cd3e646ab"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry>Authorization</con:entry>
						<con:entry>grant_type</con:entry>
						<con:entry>refresh_token</con:entry>
						<con:entry>scope</con:entry>
					</con:parameterOrder>
				</con:request>
				<con:request name="POST DataCustodian Client Credentials Request" mediaType="application/json" postQueryString="false" id="448b4c28-e1dc-4451-b625-001cbe1530e6">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/oauth/token</con:originalUri>
					<con:credentials>
						<con:username>data_custodian_admin</con:username>
						<con:password>secret</con:password>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
						<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
						<con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<con:entry key="scope" value="FB=3_19_32_33_34_35_36_37_38_41_44_45"/>
						<con:entry key="grant_type" value="client_credentials"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry>Authorization</con:entry>
						<con:entry>grant_type</con:entry>
						<con:entry>scope</con:entry>
						<con:entry>refresh_token</con:entry>
					</con:parameterOrder>
				</con:request>
			</con:method>
		</con:resource>
		<con:resource name="manage" path="/management" id="e118d447-5b7f-4c3c-b7af-f8b4237bcba6">
			<con:settings/>
			<con:parameters>
				<con:parameter>
					<con:name>Authorization</con:name>
					<con:value>Bearer ${#Project#data_custodian_access_token}</con:value>
					<con:style>HEADER</con:style>
					<con:default>Bearer ${#Project#data_custodian_access_token}</con:default>
				</con:parameter>
				<con:parameter>
					<con:name>command</con:name>
					<con:value/>
					<con:style>QUERY</con:style>
					<con:default/>
				</con:parameter>
			</con:parameters>
			<con:method name="Database Resets" method="GET" id="a524f878-8932-40c2-af8e-78211d88b443">
				<con:settings/>
				<con:parameters/>
				<con:representation type="FAULT">
					<con:mediaType>text/html;charset=utf-8</con:mediaType>
					<con:status>405</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="REQUEST">
					<con:mediaType>application/xml</con:mediaType>
					<con:params/>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
					<con:status>200</con:status>
					<con:params/>
					<con:element>html</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>0</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:representation type="RESPONSE">
					<con:mediaType xsi:nil="true"/>
					<con:status>200</con:status>
					<con:params/>
					<con:element>data</con:element>
				</con:representation>
				<con:request name="resetDataCustodianDB" mediaType="application/xml" postQueryString="false" id="6511b5ba-23eb-4bfe-9f6a-58577bfdfd37">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/manage</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters><entry key="command" value="resetDataCustodianDB" xmlns="http://eviware.com/soapui/config"/></con:parameters>
					<con:parameterOrder>
						<con:entry/>
						<con:entry>Authorization</con:entry>
					</con:parameterOrder>
				</con:request>
				<con:request name="initializeDataCustodianDB" mediaType="application/xml" postQueryString="false" id="a8d9f598-e5ea-4e02-86ea-92a34d4c8332">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
					<con:request/>
					<con:originalUri>http://localhost/DataCustodian/manage</con:originalUri>
					<con:credentials>
						<con:authType>No Authorization</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters>
						<entry key="command" value="initializeDataCustodianDB" xmlns="http://eviware.com/soapui/config"/>
					</con:parameters>
					<con:parameterOrder>
						<con:entry/>
						<con:entry>Authorization</con:entry>
					</con:parameterOrder>
				</con:request>
			</con:method>
		</con:resource>
	</con:interface>
	<con:testSuite name="Library" id="0275335f-7515-4da0-a729-cce9f7858991">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GeneralScripts" searchProperties="true" id="c4c4fa40-6628-4c8a-bbbb-2b34185b90b2">
			<con:settings/>
			<con:testStep type="groovy" name="LoadConfig" id="bd695d4c-f5b4-416c-84b1-346616c98830">
				<con:settings/>
				<con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL())

// urls
project.setPropertyValue("BaseURL",config.BaseURL);
project.setPropertyValue("ServiceEndpoint",config.ServiceEndpoint);
project.setPropertyValue("DataCustodianContext",config.DataCustodianContext);
project.setPropertyValue("ThirdPartyContext",config.ThirdPartyContext);
project.setPropertyValue("linkPrefixForReplace",config.linkPrefixForReplace);

// test accounts
project.setPropertyValue("TestManager",config.TestManager);
project.setPropertyValue("TestManagerPW",config.TestManagerPW);
project.setPropertyValue("TestRetailCustomer",config.TestRetailCustomer);
project.setPropertyValue("TestRetailCustomerPW",config.TestRetailCustomerPW);

// resourceIds
project.setPropertyValue("retailCustomerId",config.retailCustomerId);
project.setPropertyValue("usagePointId",config.usagePointId);
project.setPropertyValue("resourceId",config.resourceId);
project.setPropertyValue("meterReadingId",config.meterReadingId);
project.setPropertyValue("readingTypeId",config.readingTypeId);
project.setPropertyValue("intervalBlockId",config.intervalBlockId);
project.setPropertyValue("electricPowerQualitySummaryId",config.electricPowerQualitySummaryId);
project.setPropertyValue("electricPowerUsageSummaryId",config.electricPowerUsageSummaryId);
project.setPropertyValue("subscriptionId",config.subscriptionId);
project.setPropertyValue("applicationInformationId",config.applicationInformationId);
project.setPropertyValue("authorizationId",config.authorizationId);
project.setPropertyValue("bulkId",config.bulkId);
project.setPropertyValue("localTimeParametersId",config.localTimeParametersId);
project.setPropertyValue("HomePageURLEndpoint",config.HomePageURLEndpoint);

// test files
project.setPropertyValue("TestFile",config.TestFile);
project.setPropertyValue("usagePointUUID1",config.usagePointUUID1);
project.setPropertyValue("usagePointDescription1",config.usagePointDescription1);
project.setPropertyValue("TestFile2",config.TestFile2);
project.setPropertyValue("usagePointUUID2",config.usagePointUUID2);
project.setPropertyValue("usagePointDescription2",config.usagePointDescription2);

// access tokens
project.setPropertyValue("data_custodian_access_token",config.data_custodian_access_token);
project.setPropertyValue("third_party_access_token",config.third_party_access_token);
project.setPropertyValue("upload_access_token",config.upload_access_token);
project.setPropertyValue("registration_third_party_access_token",config.registration_third_party_access_token);

// external program system commands
project.setPropertyValue("mysqlCmdDC",config.mysqlCmdDC);
project.setPropertyValue("mysqlCmdTP",config.mysqlCmdTP);
project.setPropertyValue("opensslCmd",config.opensslCmd);
project.setPropertyValue("timeoutCmd",config.timeoutCmd);
project.setPropertyValue("DBprepopulateScriptName",config.DBprepopulateScriptName);

// oauth authorize endpoint testing
project.setPropertyValue("client_id",config.client_id);
project.setPropertyValue("redirect_uri",config.redirect_uri);
project.setPropertyValue("scope",config.scope);
project.setPropertyValue("state",config.state);
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="curlUpload" id="f40394d5-2eb7-42e2-b2a9-87b07a812c44">
				<con:settings/>
				<con:config>
					<script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def DataCustodianAccessToken = project.getPropertyValue("data_custodian_access_token")
tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"]
def UploadFile=projectPath + "/../data/" + tc.getPropertyValue("uploadFile")
def retailCustomerId = tc.getPropertyValue("retailCustomerId")

def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def tf= new File(UploadFile);
tf = tf.getAbsolutePath();

def td = projectPath + "/../data/" ;
def url= ServiceEndpointDataCustodian+"/espi/1_1/resource/Batch/RetailCustomer/"+retailCustomerId+"/UsagePoint";


public boolean RunCommand(String path,String cmd)
{
	def doCmd;

	log.info("path: " + path);
	log.info("exec: " + cmd);
	log.info("os  : " + System.properties['os.name']);

	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
	} else {
		doCmd = ["bash", "-c",cmd].execute(null, new File(path));
	}
		
	doCmd.waitFor()

	if(doCmd.exitValue()!=0)
	{
		log.error "return code: ${ doCmd.exitValue()}"
		log.error "stderr: ${doCmd.err.text}"
		log.error "stdout: ${doCmd.in.text}"

		return false;
	}

	return true;
}

// define the command
cmdPost = 'curl --header "Authorization: Bearer ' + DataCustodianAccessToken+ '" --header "Content-Type:application/xml" -X POST -d "@' + tf + '" "' + url+ '"';
log.info("exec: " + cmdPost);

// do the curl
if(RunCommand(td,cmdPost) == true) {
	assert true;
}
else
{
	testRunner.fail("could not curl up file");
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="resetDB" id="64e17259-bac9-493e-8827-b5e5dc5993e8">
				<con:settings/>
				<con:config><script>	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBTP']);



assert true;</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="resetDBDC" id="e8223182-2c20-4d85-b6cf-bb29f5ed3a30"><con:settings/><con:config><script>
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def mysqlCmdDC=project.getPropertyValue("mysqlCmdDC")

public boolean RunCommand(String path,String cmd)
{
	def doCmd;

	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
	} else {
		doCmd = ["bash", "-c",cmd].execute(null, new File(path));
	}
		
	doCmd.waitFor()

	if(doCmd.exitValue()!=0)
	{
		log.error "return code: ${ doCmd.exitValue()}"
		log.error "stderr: ${doCmd.err.text}"
		log.error "stdout: ${doCmd.in.text}"
	}
	else
	{
		log.info "return code: ${ doCmd.exitValue()}"+"  cmd:  "+ cmd;
	}
}

log.info "Reset Data Custodian DB "
log.info mysqlCmdDC ;
def etcpath = projectPath + "/etc";


RunCommand(etcpath,mysqlCmdDC + "  &lt; cleantables_dc.sql");
RunCommand(etcpath,mysqlCmdDC + "  &lt; prepopulatesql_dc.sql");


assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="resetDBTP" id="87ab1b49-e716-4e23-acf5-f48af526c18a"><con:settings/><con:config><script>
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def mysqlCmdTP=project.getPropertyValue("mysqlCmdTP")

public boolean RunCommand(String path,String cmd)
{
	def doCmd;

	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
	} else {
		doCmd = ["bash", "-c",cmd].execute(null, new File(path));
	}
		
	doCmd.waitFor()

	if(doCmd.exitValue()!=0)
	{
		log.error "return code: ${ doCmd.exitValue()}"
		log.error "stderr: ${doCmd.err.text}"
		log.error "stdout: ${doCmd.in.text}"
	}
	else
	{
		log.info "return code: ${ doCmd.exitValue()}"+"  cmd:  "+ cmd;
	}
}

log.info "Reset Third Party DB "
log.info mysqlCmdTP ;
def etcpath = projectPath + "/etc";


RunCommand(etcpath,mysqlCmdTP + "  &lt; cleantables_tp.sql");
RunCommand(etcpath,mysqlCmdTP + "  &lt; prepopulatesql_tp.sql");


assert true;</script></con:config></con:testStep><con:testStep type="groovy" name="LoadConfigCert" id="c3e267f6-62ec-47f2-9cfa-de89458e05bf">
				<con:settings/>
				<con:config><script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmdcert.conf").toURL())
def uri;

// urls
project.setPropertyValue("BaseURL",config.BaseURL);
project.setPropertyValue("ServiceEndpoint",config.ServiceEndpoint);
project.setPropertyValue("DataCustodianContext",config.DataCustodianContext);
project.setPropertyValue("ThirdPartyContext",config.ThirdPartyContext);
project.setPropertyValue("linkPrefixForReplace",config.linkPrefixForReplace);
project.setPropertyValue("dataCustodianResourceEndpoint",config.dataCustodianResourceEndpoint);
uri = project.getPropertyValue("dataCustodianResourceEndpoint");

project.setPropertyValue("dataCustodianId",config.dataCustodianId);
project.setPropertyValue("federalEIN",config.federalEIN);
project.setPropertyValue("dataCustodianResourceEndpoint",config.dataCustodianResourceEndpoint);
project.setPropertyValue("applicationInformationId",config.applicationInformationId);
project.setPropertyValue("authorizationId",config.authorizationId);
project.setPropertyValue("registration_access_token",config.registration_access_token);
project.setPropertyValue("client_access_token",config.client_access_token);
project.setPropertyValue("client_id",config.client_id);

// lets check the uri
log.info "URI: " + uri;
uritemp = uri;
i = uritemp.indexOf("espi/1_1/resource/");
if(i>0) {
    // lets shorten it by stripping off up to resource
    uritemp = uritemp.substring(0,i-1);
    log.info "ServiceEndpoint " + uritemp;
    project.setPropertyValue("ServiceEndpoint",uritemp);
    uritemp = uri;
    uritemp = uritemp.substring(uritemp.indexOf("espi/1_1/resource/"), uritemp.length());
    log.info "resourceUri: " + uritemp;
    project.setPropertyValue("resourceUri",uritemp);

}  else {
    // cant be a resource
    log.info ("Uri not well formed: " + uri);					
}

// external program system commands
project.setPropertyValue("mysqlCmdDC",config.mysqlCmdDC);
project.setPropertyValue("mysqlCmdTP",config.mysqlCmdTP);
project.setPropertyValue("opensslCmd",config.opensslCmd);
project.setPropertyValue("timeoutCmd",config.timeoutCmd);
project.setPropertyValue("DBprepopulateScriptName",config.DBprepopulateScriptName);

// oauth authorize endpoint testing
project.setPropertyValue("client_id",config.client_id);
project.setPropertyValue("redirect_uri",config.redirect_uri);
project.setPropertyValue("scope",config.scope);
project.setPropertyValue("state",config.state);
</script></con:config>
			</con:testStep><con:properties>
				<con:property>
					<con:name>uploadFile</con:name>
					<con:value>test_usage_data.xml</con:value>
				</con:property>
				<con:property>
					<con:name>retailCustomerId</con:name>
					<con:value>1</con:value>
				</con:property>
			</con:properties>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reuse Groovy Selenium Steps" searchProperties="true" id="a24652db-d303-4275-818c-f0c7c5378493">
			<con:description>Copy these steps to construct a sequence using selenium session across test steps

Always use sequence:
StartDriver
... your steps
StopDriver

This can only be run as a test case and not as individual steps</con:description>
			<con:settings/>
			<con:testStep type="groovy" name="StartDriver" id="bef235ef-555c-424e-8763-1b16699c8cf0">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.greenbutton.cmd.utils.DriverHelper;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver

return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LoginManager" id="835106b3-eb81-4064-bf8b-ffda3919247f">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

log.info( TestManager + "  " + TestManagerPW)
/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
/////////////////////////////////////////////////////////
// Open the DataCustodian Page
/////////////////////////////////////////////////////////
driver.get(ServiceEndpoint)


/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="UploadFileViaGui" id="71e77312-72cd-4a23-9bac-7b65701e138c">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
def TestFile = tf.getAbsolutePath();
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{

/////////////////////////////////////////////////////////
// Open the DataCustodian Page
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.linkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.linkText("Customer List")).click();
driver.findElement(By.linkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
driver.findElement(By.name("create")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LogoutManager" id="cc86656c-aa44-4aa7-8ff1-72d7e4672e81">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// Logout Manager
/////////////////////////////////////////////////////////
driver.get(ServiceEndpoint)
driver.findElement(By.id("logout")).click();
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StopDriver" id="2509d69d-c4e9-4dc0-a49a-960d836993e2">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
//Close the browser
driver.quit()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="AuthorizeStartDataCustodian" id="5aa4d5a1-cf31-4dff-97b4-101a954192dd">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
//	WebDriverTestStepTemplate
//
// This template allows for interactions with a web browser
// based on the previous initialization of a webdriver 
// stored in the context of the test.
//
// Previous to this step, include a copy of the StartDriver
// script. You can then use the driver in this test step or
// others like it.

// Also note that steps created this way can only be run as 
// part of the complete test and not as inidividual steps
// run in isolation
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// run test step details
/////////////////////////////////////////////////////////
 driver.get(ServiceEndpoint)
 
///////////////////////////////////////////////////////// 
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.linkText("OAuth Token Management")).click();
driver.findElement(By.linkText("Delete All OAuth Tokens")).click();
driver.findElement(By.id("logout")).click();
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.linkText("Third Parties")).click();
driver.findElement(By.name("Third_party")).click();
driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.name("scope")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
driver.findElement(By.name("authorize")).click(); sleep(1000)
driver.findElement(By.linkText("Usage Points")).click();
driver.findElement(By.linkText("Front Electric Meter")).click();
sleep(5000)	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="WebDriverTestStepTemplate" id="d5c71853-2d73-4fad-aca4-e246570d9fbc">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
//	WebDriverTestStepTemplate
//
// This template allows for interactions with a web browser
// based on the previous initialization of a webdriver 
// stored in the context of the test.
//
// Previous to this step, include a copy of the StartDriver
// script. You can then use the driver in this test step or
// others like it.

// Also note that steps created this way can only be run as 
// part of the complete test and not as inidividual steps
// run in isolation
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// run test step details
/////////////////////////////////////////////////////////
	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Set Access Tokens" id="c0d77564-a5e7-44cd-b22d-533eb8c5ce8d">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import com.eviware.soapui.support.types.StringToStringMap;


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"];

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL");
def ServiceEndpoint=BaseURL+"/ThirdParty/home";
List&lt;WebElement> rows;
def teststep;

log.info("Service Endpoint: " + ServiceEndpoint);

try {
	/////////////////////////////////////////////////////////
	// run test step details
	/////////////////////////////////////////////////////////
	// open Data Custodian
	driver.get(ServiceEndpoint)

	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Authorizations")).click();
	rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken1 = rows.get(rows.size() - 1).getText();
	log.info("accessToken1:" +  accessToken1);
	project.setPropertyValue("userAccessToken1",accessToken1);
	driver.findElement(By.id("logout")).click();

	// set message parameters
	teststep = testRunner.testCase.getTestStepByName("GET Subscription 1");
	teststep.setPropertyValue("Authorization","Bearer "+ accessToken1);
	teststep.setPropertyValue("subscriptionId","1");

	
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Authorizations")).click();
	rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken2 = rows.get(rows.size() - 1).getText();
	log.info("accessToken2:" +  accessToken2);
	project.setPropertyValue("userAccessToken2",accessToken2);
	driver.findElement(By.id("logout")).click();

	// set message parameters
	teststep = testRunner.testCase.getTestStepByName("GET Subscription 2");
	teststep.setPropertyValue("Authorization","Bearer "+ accessToken2);
	teststep.setPropertyValue("subscriptionId","2");


	} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UploadTestFile GUI" searchProperties="true" id="8fb96c20-d08c-40ea-8ab1-3e14f41d3f50">
			<con:description>Uploads test usage file</con:description>
			<con:settings/>
			<con:testStep type="groovy" name="StartDriver" id="56eef8b8-6131-45af-ae06-8bc2b68d8cec">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.greenbutton.cmd.utils.DriverHelper;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver

return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LoginManager" id="e7da1200-5c19-4da2-8d6b-2bed7b871c6e">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

log.info( TestManager + "  " + TestManagerPW)
/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
/////////////////////////////////////////////////////////
// Open the DataCustodian Page
/////////////////////////////////////////////////////////
driver.get(ServiceEndpoint)


/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="UploadFileViaGui" id="6bdde26b-d0bd-4335-9eb7-d792c3e338b4">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
def TestFile = tf.getAbsolutePath();
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
log.info "Test File: " + TestFile;
/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{

/////////////////////////////////////////////////////////
// Open the DataCustodian Page
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.linkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.linkText("Customer List")).click();
driver.findElement(By.linkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
driver.findElement(By.name("create")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LogoutManager" id="ab68be2b-b63d-4b94-86df-4dc02ce67ee8">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// Logout Manager
/////////////////////////////////////////////////////////
driver.get(ServiceEndpoint)
driver.findElement(By.id("logout")).click();
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StopDriver" id="9b73f45e-1b45-4e8f-ac1c-5fa8afcf1389">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
//Close the browser
driver.quit()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UploadTestFileAndAuthorize" searchProperties="true" id="ee58b28d-b2b2-4c95-89aa-91bbae71bdac">
			<con:description>Uploads test usage file and authorizes it</con:description>
			<con:settings/>
			<con:testStep type="groovy" name="resetDB" id="5eb74848-759c-4a82-a14e-6fb12f2ad02d">
				<con:settings/>
				<con:config>
					<script>	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

assert true;</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StartDriver" id="81cf2761-f96b-4684-bad1-25fb42d74eb2">
				<con:settings/>
				<con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.greenbutton.cmd.utils.DriverHelper;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver
driver._iSleepBetweenStepsMs = 500;

return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LoginManager" id="59981e5f-1521-4338-b8e5-43b2a0e31cdc">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

log.info( TestManager + "  " + TestManagerPW)
/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
/////////////////////////////////////////////////////////
// Open the DataCustodian Page
/////////////////////////////////////////////////////////
driver.get(ServiceEndpoint)


/////////////////////////////////////////////////////////
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="UploadFileViaGui" id="f1134872-7973-466c-a169-ecf761f0515b">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
def TestFile = tf.getAbsolutePath();
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{

/////////////////////////////////////////////////////////
// Open the DataCustodian Page
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
// Now to the upload
/////////////////////////////////////////////////////////
driver.findElement(By.linkText("Upload")).click();
driver.findElement(By.name("file")).sendKeys(TestFile);
driver.findElement(By.name("upload")).click();
driver.findElement(By.linkText("Customer List")).click();
driver.findElement(By.linkText(TestRetailCustomer)).click();
driver.findElement(By.partialLinkText("Add Usage")).click();
driver.findElement(By.id("UUID")).clear();
driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
driver.findElement(By.name("create")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LogoutManager" id="e4d62b39-aeb3-4486-b61b-289b545e3b6d">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// Logout Manager
/////////////////////////////////////////////////////////
driver.get(ServiceEndpoint)
driver.findElement(By.id("logout")).click();
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="AuthorizeStartDataCustodian" id="7e4a27b1-f835-4fb0-8bf9-bba781741dd8">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
//	WebDriverTestStepTemplate
//
// This template allows for interactions with a web browser
// based on the previous initialization of a webdriver 
// stored in the context of the test.
//
// Previous to this step, include a copy of the StartDriver
// script. You can then use the driver in this test step or
// others like it.

// Also note that steps created this way can only be run as 
// part of the complete test and not as inidividual steps
// run in isolation
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// run test step details
/////////////////////////////////////////////////////////
 driver.get(ServiceEndpoint)
 
///////////////////////////////////////////////////////// 
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.linkText("OAuth Token Management")).click();
driver.findElement(By.linkText("Delete All OAuth Tokens")).click();
driver.findElement(By.id("logout")).click();
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.linkText("Third Parties")).click();
driver.findElement(By.name("Third_party")).click();
driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.name("scope")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
driver.findElement(By.name("authorize")).click(); sleep(1000)
driver.findElement(By.linkText("Usage Points")).click();
driver.findElement(By.linkText("Front Electric Meter")).click();
sleep(5000)	
driver.findElement(By.id("logout")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StopDriver" id="2a30cbce-dd35-4846-996f-761daf430e84">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
//Close the browser
driver.quit()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="EstablishTwoSubscriptions" searchProperties="true" id="842a41c8-96fb-4b15-bab5-c26d1f3f0dba">
			<con:settings/>
			<con:testStep type="groovy" name="resetDB">
				<con:settings/>
				<con:config>
					<script>	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

assert true;</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StartDriver">
				<con:settings/>
				<con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.greenbutton.cmd.utils.DriverHelper;

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver

return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LoginManager">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

log.info( TestManager + "  " + TestManagerPW)
/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
	/////////////////////////////////////////////////////////
	// Open the DataCustodian Page
	/////////////////////////////////////////////////////////
	driver.get(ServiceEndpoint)
	
	
	/////////////////////////////////////////////////////////
	// Log in as Manager
	/////////////////////////////////////////////////////////
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear()
	driver.findElement(By.name("j_username")).sendKeys(TestManager)
	driver.findElement(By.name("j_password")).clear()
	driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
	driver.findElement(By.name("submit")).click()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="UploadTwoFilesViaGui">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def tf= new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"));
def TestFile = tf.getAbsolutePath();
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]
try {
	/////////////////////////////////////////////////////////
	// Open the DataCustodian Page
	/////////////////////////////////////////////////////////
	
	
	/////////////////////////////////////////////////////////
	// Now to the upload
	/////////////////////////////////////////////////////////
	// Alan id=1
	driver.findElement(By.linkText("Upload")).click();
	driver.findElement(By.name("file")).sendKeys(TestFile);
	driver.findElement(By.name("upload")).click();
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys("48C2A019-5598-4E16-B0F9-49E4FF27F5FB");
	driver.findElement(By.name("create")).click();

	// Charles id=5
	def tf1= new File(projectPath + "/../data/" + "Gas.xml");
	TestFile = tf1.getAbsolutePath();

	driver.findElement(By.linkText("Upload")).click();
	driver.findElement(By.name("file")).sendKeys(TestFile);
	driver.findElement(By.name("upload")).click();
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText("charles")).click();
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys("0642EABA-8E42-4D1A-A375-AF54993C007B");
	driver.findElement(By.name("create")).click();
	
	driver.findElement(By.id("logout")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="AuthorizeTwoCustomer">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
//	WebDriverTestStepTemplate
//
// This template allows for interactions with a web browser
// based on the previous initialization of a webdriver 
// stored in the context of the test.
//
// Previous to this step, include a copy of the StartDriver
// script. You can then use the driver in this test step or
// others like it.

// Also note that steps created this way can only be run as 
// part of the complete test and not as inidividual steps
// run in isolation
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import com.eviware.soapui.support.types.StringToStringMap;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian/home"

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
	/////////////////////////////////////////////////////////
	// run test step details
	/////////////////////////////////////////////////////////
	// open Data Custodian
	driver.get(ServiceEndpoint)
	
	
	///////////////////////////////////////////////////////// 
	// Log in as Alan and do the OAuth thing
	/////////////////////////////////////////////////////////
	
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Third Parties")).click();
	driver.findElement(By.name("Third_party")).click();
	driver.findElement(By.cssSelector("label")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.name("scope")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click(); 
	sleep(1000);
	List&lt;WebElement> rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken1 = rows.get(rows.size() - 1).getText();
	log.info("accessToken1:" +  accessToken1);

	def headers = new StringToStringMap();
	headers.put("Authorization","Bearer " + accessToken1);
	
//	testRunner.testCase.getTestStepByName("GET Subscription 1").testRequest.setRequestHeaders(headers);
//	testRunner.testCase.getTestStepByName("GET Subscription 2").testRequest.setRequestHeaders(headers);
	
	project.setPropertyValue("subscriptionID","1");
	driver.findElement(By.id("logout")).click();
	ServiceEndpoint=BaseURL+"/DataCustodian/home"
	driver.get(ServiceEndpoint)
	driver.findElement(By.id("logout")).click();
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Third Parties")).click();
	driver.findElement(By.name("Third_party")).click();
	driver.findElement(By.cssSelector("label")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.name("scope")).click();
	driver.findElement(By.name("next")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click(); sleep(1000)
	driver.findElement(By.id("logout")).click();
	
	
	//ServiceEndpoint=BaseURL+"/DataCustodian/home"
	//driver.get(ServiceEndpoint)
	//driver.findElement(By.id("logout")).click();
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Set Access Tokens">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import com.eviware.soapui.support.types.StringToStringMap;


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"];

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL");
def ServiceEndpoint=BaseURL+"/ThirdParty/home";
List&lt;WebElement> rows;
def teststep;

log.info("Service Endpoint: " + ServiceEndpoint);

try {
	/////////////////////////////////////////////////////////
	// run test step details
	/////////////////////////////////////////////////////////
	// open Data Custodian
	driver.get(ServiceEndpoint)

	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Authorizations")).click();
	rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken1 = rows.get(rows.size() - 1).getText();
	log.info("accessToken1:" +  accessToken1);
	project.setPropertyValue("userAccessToken1",accessToken1);
	driver.findElement(By.id("logout")).click();

	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Authorizations")).click();
	rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken2 = rows.get(rows.size() - 1).getText();
	log.info("accessToken2:" +  accessToken2);
	project.setPropertyValue("userAccessToken2",accessToken2);
	driver.findElement(By.id("logout")).click();

	} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="LogoutManager">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]
try {
	/////////////////////////////////////////////////////////
	// Logout Manager
	/////////////////////////////////////////////////////////
	driver.get(ServiceEndpoint)
	driver.findElement(By.id("logout")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StopDriver">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

//Close the browser
driver.quit();

//Then in later steps you can retrieve it as context["driverInstance"] 
</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AuthorizeSubcscription" searchProperties="true" id="4c20478c-a431-4761-bd93-3e878a74bbad">
			<con:description>Authorizes subscription for Alan</con:description>
			<con:settings/>
			<con:testStep type="groovy" name="StartDriver">
				<con:settings/>
				<con:config><script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.greenbutton.cmd.utils.DriverHelper;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver

return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="AuthorizeStartDataCustodian">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
//	WebDriverTestStepTemplate
//
// This template allows for interactions with a web browser
// based on the previous initialization of a webdriver 
// stored in the context of the test.
//
// Previous to this step, include a copy of the StartDriver
// script. You can then use the driver in this test step or
// others like it.

// Also note that steps created this way can only be run as 
// part of the complete test and not as inidividual steps
// run in isolation
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def ServiceEndpoint=BaseURL+"/DataCustodian"
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=project.getPropertyValue("TestFile")
log.info("We are talking to: " + ServiceEndpoint) 
log.info("Test File Path: "+ TestFile)

/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try{
/////////////////////////////////////////////////////////
// run test step details
/////////////////////////////////////////////////////////
 driver.get(ServiceEndpoint)

 /* Dont clear tokens
///////////////////////////////////////////////////////// 
// Log in as Manager
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear()
driver.findElement(By.name("j_username")).sendKeys(TestManager)
driver.findElement(By.name("j_password")).clear()
driver.findElement(By.name("j_password")).sendKeys(TestManagerPW)
driver.findElement(By.name("submit")).click()
driver.findElement(By.linkText("OAuth Token Management")).click();
driver.findElement(By.linkText("Delete All OAuth Tokens")).click();
driver.findElement(By.id("logout")).click();*/
///////////////////////////////////////////////////////// 
// Log in as Alan and do the OAuth thing
/////////////////////////////////////////////////////////
driver.findElement(By.id("login")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.linkText("Third Parties")).click();
driver.findElement(By.name("Third_party")).click();
driver.findElement(By.cssSelector("label")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("j_username")).clear();
driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
driver.findElement(By.name("j_password")).clear();
driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
driver.findElement(By.name("submit")).click();
driver.findElement(By.name("scope")).click();
driver.findElement(By.name("next")).click();
driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
driver.findElement(By.name("authorize")).click(); 
//sleep(1000)
//driver.findElement(By.linkText("Usage Points")).click();
driver.findElement(By.id("logout")).click();

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StopDriver">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

try {
//Close the browser
driver.quit()

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ResourceTestScripts" searchProperties="true">
			<con:settings/>
			<con:testStep type="groovy" name="resourceTests">
				<con:settings/>
				<con:config>
					<script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseException;
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT
import groovyx.net.http.Method;

import org.xml.sax.InputSource;

import java.io.File;
import java.io.FilenameFilter;

import org.apache.commons.io.FileUtils;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}


public class ResourceTester {

	Object log;
	public String _strError = "";
	Document _docResponse = null;
	String _strResponseBody = null;

	String default_access_token;

	ResourceTester(Object theLog)
	{
		log = theLog;
	}

	public setAccessToken(String token)
	{
		default_access_token = token;
	//*********************************************************
	log.info("Default Access Token Service = " + default_access_token);
	//*********************************************************
	
		
	}

	public String parseSelfLink(Document srcDoc)
	{
		XPath xpath = XPathFactory.newInstance().newXPath();
		
		// add namespaces
		HashMap<String, String> prefMap = new HashMap<String, String>() {{
		    put("espi", "http://naesb.org/espi");
		    put("ns3", "http://www.w3.org/2005/Atom");
		}};
		
		SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
		
		xpath.setNamespaceContext(namespaces);
		
		// find resource self link
		String strExpr = "/ns3:entry/ns3:link[@rel='self']/@href";
		XPathExpression expr = xpath.compile(strExpr);
		String href = expr.evaluate(srcDoc);
	
		return href; 
	}
	
	
	public String parseEntryName(Document srcDoc)
	{
		String strEntryName;
		
		//find tag name of espi content
		Element feed = srcDoc.getDocumentElement();
		NodeList nlContent = feed.getElementsByTagName("ns3:content");
		NodeList nlContentChildren = nlContent.item(0).getChildNodes();
	
		for(int j = 0 ; j < nlContentChildren.getLength();j++) {
			if(nlContentChildren.item(j).getNodeType()==Node.ELEMENT_NODE)
			{
				Element espi = (Element) nlContentChildren.item(j);
				strEntryName = espi.getNodeName();
			}
		}

		return strEntryName;
	}

	public Document parseDocument(String strInputFile)
	{
		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
		domFactory.setNamespaceAware(true); 
		DocumentBuilder builder = domFactory.newDocumentBuilder();
		
		// parse source document "Xpath form
		Document srcDoc = builder.parse(strInputFile);
	
		return srcDoc;
	}


	private Element getDirectChild(Element parent, String name) {
		
	    for(Node child = parent.getFirstChild(); child != null; child = child.getNextSibling())
	    {
	        if(child instanceof Element && name.equals(child.getNodeName())) return (Element) child;
	    }
	    
	    return null;
	}
	
	private String getNodeValue( Node node ) {
		
	    NodeList childNodes = node.getChildNodes();
	    
	    for (int x = 0; x < childNodes.getLength(); x++ ) {
	    	
	        Node data = childNodes.item(x);
	        if ( data.getNodeType() == Node.TEXT_NODE )
	            return data.getNodeValue().trim();
	    }
	    
	    return "";
	}
	
	private boolean CompareLinks(Node nodeSource,Node nodeResult,Object log) {
		
		String strHrefSrc = nodeSource.getAttribute("href");
		String strRelSrc = nodeSource.getAttribute("rel");
	
		//log.info("Compare link: href:" + strHrefSrc + " rel:" + strRelSrc); 
		
		NodeList nlRes = nodeResult.getChildNodes();
	
		for (int i = 0; i < nlRes.getLength(); i++) 
		{	
			if(nlRes.item(i).getNodeType()==Node.ELEMENT_NODE)
			{
				String strResNodeName = nlRes.item(i).getNodeName();
				if(strResNodeName.equals("ns3:link"))
				{
					String strHrefRes = nlRes.item(i).getAttribute("href");
					String strRelRes = nlRes.item(i).getAttribute("rel");		
	
					if((strHrefRes.equals(strHrefSrc)) && (strRelRes.equals(strRelSrc)))
					{
						return false;
					}
				}
			}
		}
	
		log.error("Did not find matching link for href:" + strHrefSrc + " rel:" + strRelSrc);

		_strError = _strError + "Did not find matching link for href:" + strHrefSrc + " rel:" + strRelSrc;
		
		return true;
	}
	
	private boolean CompareNodes(Node nodeSource,Node nodeResult,Object log) {
		
		boolean bFailure = false;
		
		if(nodeSource.getNodeType()==Node.ELEMENT_NODE) {
	
			String strSrcNodeName = nodeSource.getNodeName();	 
			String strResNodeName = nodeResult.getNodeName();	 
	
			//log.info("Comparing nodes: " + strSrcNodeName + " and " + strResNodeName);
	
			if(!strSrcNodeName.equals(strResNodeName)) {
				log.error("Node: " + strSrcNodeName + " names not equal");
				_strError = _strError + "Node: " + strSrcNodeName + " names not equal";
				bFailure = true;
			}
	
			String strSrcNodeValue = getNodeValue(nodeSource);	 
			String strResNodeValue = getNodeValue(nodeResult);
	
			if(strSrcNodeName.equals("ns3:id"))
			{
				strSrcNodeValue = strSrcNodeValue.toUpperCase();
				strResNodeValue = strResNodeValue.toUpperCase();
			}
	
			//log.info("Node: " + strSrcNodeName + "SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue);
	
			//if(!strSrcNodeName.equals("ns3:published") && !strSrcNodeName.equals("ns3:updated")) {	
				if(!strSrcNodeValue.equals(strResNodeValue))
				{
					log.error("Node: " + strSrcNodeName + " values not equal: SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue);	
					_strError = _strError + "Node: " + strSrcNodeName + " values not equal: SrcNodeVal: " + strSrcNodeValue + " ResNodeVal: " + strResNodeValue;
					bFailure = true;
				}
			//}
	
			NodeList nlSrc = nodeSource.getChildNodes();
			NodeList nlRes = nodeResult.getChildNodes();
	
			for (int i = 0; i < nlSrc.getLength(); i++) 
			{
				if(nlSrc.item(i).getNodeType()==Node.ELEMENT_NODE)
				{
					if(strSrcNodeName.equals("espi:IntervalBlock"))
					{
						//log.info("espi:IntervalBlock");
						bFailure = bFailure  | CompareNodes(nlSrc.item(i),nlRes.item(i),log);
					}
					else if(!nlSrc.item(i).getNodeName().equals("ns3:link"))
					{
	
						Element elResultChild = getDirectChild(nodeResult,nlSrc.item(i).getNodeName());
						if(elResultChild==null)
						{
							log.error("Node: " + strSrcNodeName + " Result does not contain Child: " + nlSrc.item(i).getNodeName());
							_strError = _strError + "Node: " + strSrcNodeName + " Result does not contain Child: " + nlSrc.item(i).getNodeName();
							bFailure = true;
							
						}
						else
						{
							bFailure = bFailure  | CompareNodes(nlSrc.item(i),elResultChild,log);
						}
					}
					else
					{
						// treat links specially
						//bFailure = bFailure  | CompareLinks(nlSrc.item(i),nodeResult,log);				
					}
				}
			}
		}
	
		return bFailure;
	}
	
	
	public String ReplaceLinks(String strEntryName,String strOriginal)
	{
		String strReturn;
		
		if(strEntryName.equals("espi:IntervalBlock")) {
		
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
			//strReturn = strOriginal.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
		}
		else if(strEntryName.equals("espi:UsagePoint")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
		}
		else if(strEntryName.equals("espi:MeterReading")) {
		
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
		}
		else if(strEntryName.equals("espi:ReadingType")) {
		
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
		}	
		else if(strEntryName.equals("espi:ElectricPowerUsageSummary")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
				
		}
		else if(strEntryName.equals("espi:ElectricPowerQualitySummary")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);					
		}
		else if(strEntryName.equals("espi:LocalTimeParameters")) {
			
			strReturn = strOriginal.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
			//strReturn = strOriginal.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersId);					
		}	
		else
		{
			
			//strReturn = strOriginal.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
			//strReturn = strOriginal.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
			//strReturn = strOriginal.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
			//strReturn = strOriginal.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
			//strReturn = strOriginal.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
			//strReturn = strOriginal.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);							
		}				
	}
	

	public boolean doDELETE(boolean bShouldPass,String strBaseEndpoint,String href, String token) {
	
		boolean bFailure = false;
		String strResult = "";
			
		try {
			
			def http = new HTTPBuilder(strBaseEndpoint);
	
			def res = http.request(Method.DELETE) { req ->
			    uri.path = href	
			    headers.Authorization = 'Bearer ' + token
			    response.success = { resp, object ->			        
			        strResult = "DELETE succeeded: " + resp.status;
			    }		 
			    response.failure = { resp ->
			       
			        strResult = "DELETE Failed: " + resp.statusLine;
			        bFailure = true;
			    }	    
			}		      		
		} catch ( HttpResponseException ex ) {
		    
		    // default failure handler throws an exception:
		    strResult = "DELETE Unexpected response error: ${ex.statusCode}";
		    _strError = strResult;
		    bFailure = true;
		    return true;
		}			
	
	
		if(bShouldPass) {
			if(bFailure) {
				_strError = strResult;
				return true;
			} else {
				return false;
			}
		} else {
			if(!bFailure) {
				_strError = "DELETE did not fail as expected " + strResult ;
				return true;
			} else {
				return false;
			}		
		}
		
		return true;
	}
	
	public boolean doGET(boolean bShouldPass,String strBaseEndpoint,String strInputFile,Document docSrc,String href, String token) {
		
		boolean bFailure = false;
		String strResult = "";
		String strBody = "";
		
	  	def http = new HTTPBuilder();
	  
		try {
	
			http.request( strBaseEndpoint, GET, TEXT ) { req ->
				uri.path = href
			     headers.Authorization = 'Bearer ' + token
				headers.Accept = 'application/atom+xml'
				
				response.success = { resp, reader ->
					//assert resp.statusLine.statusCode == 200
					//log.info "Got response: ${resp.statusLine}"
					//log.info "Content-Type: ${resp.headers.'Content-Type'}"
					//log.info reader.text
					strBody = reader.text;	
					//log.info("body: " + strBody);	
					_strResponseBody = strBody; 		
				}						
				response.failure = { resp ->
					strResult = "GET Failed: " + resp.statusLine;
					bFailure = true;
				}  
			}
		} catch ( HttpResponseException ex ) {
		    // default failure handler throws an exception:
		    strResult ="GET Unexpected response error: ${ex.statusCode}"
		    _strError = strResult;
		    bFailure = true;
		    return true;
		} catch (Exception e) {
		    strResult ="GET Unexpected error"
		    _strError = strResult;
		    bFailure = true;
		    return true;			
		}
	
		if(bShouldPass) {
			if(!bFailure) {
				
				DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
				domFactory.setNamespaceAware(true); 
				DocumentBuilder builder = domFactory.newDocumentBuilder();
			
				def Document docResult = builder.parse(new InputSource(new StringReader(strBody)));

				if(strInputFile!=null) {
					
					Element feedSrc = docSrc.getDocumentElement();
					Element feedResult = docResult.getDocumentElement();
				
					bFailure = CompareNodes(feedSrc,feedResult,log);			
		
					if(bFailure) {
						_strError = "GET content veification failure" + _strError;
						return true;
					} else {
						_docResponse = docResult;
						return false;
					}
				}
				else
				{
					_docResponse = docResult;
					return false;					
				}
			} else {
				_strError = strResult;
				return true;
			}
		} else {
			if(bFailure) {
				return false;
			} else {
				_strError = "GET did not fail as expected: " + _strError + strResult;
				return true;
			}
		}
	
		return true;
	}
	
	
	
	public boolean doPOST(boolean bShouldPass,String strBaseEndpoint,String strInputFile,String href, String token) {
		
		// used for creating new record
	
		boolean bFailure = false;
		String strResult = "";
		
		try {
			
			String strContent = FileUtils.readFileToString(new File(strInputFile));
	
			try {
				
				def http = new HTTPBuilder(strBaseEndpoint);
		
				def res = http.request(Method.POST) { req ->
				    uri.path = href
				    headers.Authorization = 'Bearer ' + token
				   // send("application/xml", strContent)
				    send("application/atom+xml", strContent)
				 
				    response.success = { resp, object ->
				    		strResult = "POST succeeded: " + resp.status;	   
				    }
				 
				    response.failure = { resp ->
					    strResult = "POST Failed: " + resp.statusLine;
				        	bFailure = true;
				    }			 
				}
			      		
			} catch ( HttpResponseException ex ) {
			    
			    // default failure handler throws an exception:
			    strResult = "POST Unexpected response error: ${ex.statusCode}"
			    _strError = strResult;
			    bFailure = true;
			    return true;
			}			
		} catch (IOException e) {			
			//e.printStackTrace();
			_strError = "POST Error reading file: " + strInputFile;
			bFailure = true;
			return true;
		}
	
	
		if(bShouldPass) {
			if(bFailure) {
				_strError = strResult;
				return true;
			} else {
				return false;
			}
		} else {
			if(!bFailure) {
				_strError = "POST did not fail as expected " + strResult;
				return true;
			} else {
				return false;
			}		
		}
		
		return true;
	}
	
	
	public boolean doPUT(boolean bShouldPass,String strBaseEndpoint,String strInputFile,String href, String token) {
		
		boolean bFailure = false;
		String strResult = "";
			
		// used for putdating record
		try {
			
			String strContent = FileUtils.readFileToString(new File(strInputFile));
	
			try {
				
				def http = new HTTPBuilder(strBaseEndpoint);
		
				def res = http.request(Method.PUT) { req ->
				    uri.path = href
				    headers.Authorization = 'Bearer ' + token
				    //send("application/xml", strContent)	
				    send("application/atom+xml", strContent)
				 
				    response.success = { resp, object ->
				        strResult = "PUT succeeded: " + resp.status;		        
				    }			 
				    response.failure = { resp ->	       
				        strResult = "PUT Failed: " + resp.statusLine;				    
				        bFailure = true;
				    }
				}
			      		
			}catch ( HttpResponseException ex ) {
			    
			    // default failure handler throws an exception:
			    strResult = "PUT Unexpected response error: ${ex.statusCode}";
			    bFailure = true;
			}			
		} catch (IOException e) {
			
			//e.printStackTrace();
			strResult = "PUT Error reading file: " + strInputFile;
			_strError = strResult;
			return true;
		}
	
		if(bShouldPass)
		{
			if(bFailure)
			{
				_strError = strResult;
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			if(!bFailure)
			{
				_strError = "PUT did not fail as expected" + strResult;
				return true;
			}
			else
			{
				return false;
			}		
		}
		
		return true;
	}
	
	
	public boolean TestDeleteXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		// read back xpath style resource and validate response against source
		log.info("Delete XPATH " + strBaseEndpoint + href);	
		bFailure = doDELETE(bShouldPass,strBaseEndpoint,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Delete XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}

		return bFailure;
	}

	public boolean TestDeleteROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");

		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
			
		// read back xpath style resource and validate response against source
		log.info("Delete ROOT " + strBaseEndpoint + href);	
		bFailure = doDELETE(bShouldPass,strBaseEndpoint,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Delete ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}		
	
		return bFailure;
	}	
	
	public boolean TestPostXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile)
	{
		
		boolean bFailure = false;

		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
		
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		int idx = href.lastIndexOf("/");
		href = href.substring(0,idx);
	
		log.info("POST XPATH " + strBaseEndpoint + href);		
		bFailure = doPOST(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: POST XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
					
		return bFailure;
	}
	
	public boolean TestPutXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
		
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		log.info("PUT XPATH " + strBaseEndpoint + href);			
		bFailure = doPUT(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: PUT XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}
	
	public boolean TestPutROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
	
		log.info("PUT ROOT " + strBaseEndpoint + href);		
		bFailure = doPUT(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: PUT ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}
	
	public boolean TestPostROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);	
	
		int idx = href.lastIndexOf("/");
		href = href.substring(0,idx);
	
		log.info("POST ROOT " + strBaseEndpoint + href);		
		bFailure = doPOST(bShouldPass,strBaseEndpoint,strInputFile,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: POST ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
					
		return bFailure;
	}
	
	
	public boolean TestGetXPATH(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
		
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		// read back xpath style resource and validate response against source
		log.info("Get XPATH " + strBaseEndpoint + href);		
		bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get XPATH " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
							
		return bFailure;
	}

	public boolean TestGetROOT(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
		
		boolean bFailure = false;
	
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);		
	
		// read back root style resource and validate response against source
		log.info("Get ROOT " + strBaseEndpoint + href);				
		bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href, default_access_token);

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get ROOT " + strBaseEndpoint + href + " with error:" + _strError);	
			}
		}	
				
		return bFailure;
	}

	public boolean TestGetSaveResponse(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strResource,String strOutputFile) {
		
		boolean bFailure = false;
		
		// read back xpath style resource and validate response against source
		log.info("Get " + strBaseEndpoint + strResource + " save to file:" + strOutputFile);		
		bFailure = doGET(bShouldPass,strBaseEndpoint,null,null,strResource, default_access_token);	

		if(bReportError) {
			if(bShouldPass && bFailure) {
				log.error("FAILED: Get " + strBaseEndpoint + strResource + " with error:" + _strError);	
			}
		}	

		if(!bFailure) {
			PrintStream out = null;
			try {
			    out = new PrintStream(new FileOutputStream(strOutputFile));
			    out.print(_strResponseBody);
			} finally {
			    if (out != null) out.close();
			}			
		}
							
		return bFailure;
	}	

	public boolean TestGetROOTAndLinks(boolean bShouldPass,boolean bReportError,String strBaseEndpoint,String strLinkPrefixForReplace,String strInputFile) {
			
		Document srcDoc = parseDocument(strInputFile);
		String href = parseSelfLink(srcDoc);
	
		// remove endpoint root prefix
		href = href.replace(strLinkPrefixForReplace,"");
	
		//find tag name of espi content
		String strEntryName = parseEntryName(srcDoc);
	
		// based on entry type replace links 
		href = ReplaceLinks(strEntryName,href);		
	
		// read back root style resource and validate response against source
		log.info("Get ROOT And links " + strBaseEndpoint + href);				
		boolean bFailure = doGET(bShouldPass,strBaseEndpoint,strInputFile,srcDoc,href, default_access_token);

		if(bFailure)
		{
			if(bReportError) {
				if(bShouldPass && bFailure) {
					log.error("FAILED: Get ROOT And links " + strBaseEndpoint + href + " with error:" + _strError);	
				}
			}				
			return true;
		}

		
		XPath xpath = XPathFactory.newInstance().newXPath();
		
		// add namespaces
		HashMap<String, String> prefMap = new HashMap<String, String>() {{
		    put("espi", "http://naesb.org/espi");
		    put("ns3", "http://www.w3.org/2005/Atom");
		}};
		
		SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
		
		xpath.setNamespaceContext(namespaces);
		
		// find resource self link
		String strExpr = "/ns3:entry/ns3:link/@href";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlLinks = (NodeList) expr.evaluate(_docResponse,XPathConstants.NODESET);

		boolean bFailOccurred = false;

		for (int i = 0; i < nlLinks.getLength(); i++) {
			
			String strLinkhref = getNodeValue(nlLinks.item(i));
	
			log.info("*Get resource for link: " + strLinkhref);				
			bFailure = doGET(bShouldPass,strBaseEndpoint,null,null,strLinkhref, default_access_token);	
			
			if(bFailure) {
				log.error(_strError);	
				bFailOccurred = true;
			}
			else
			{
				if(strLinkhref.endsWith("UsagePoint")||
					strLinkhref.endsWith("LocalTimeParameters")||
					strLinkhref.endsWith("MeterReading")||
					strLinkhref.endsWith("ReadingType")||
					strLinkhref.endsWith("ElectricPowerUsageSummary")||
					strLinkhref.endsWith("ElectricPowerQualitySummary")||
					strLinkhref.endsWith("IntervalBlock")) {
				
					// we should get back a feed
					
					String strExpr2 = "ns3:feed";
					xpath.setNamespaceContext(namespaces);
					XPathExpression expr2 = xpath.compile(strExpr2);
					NodeList nlEntries = (NodeList) expr2.evaluate(_docResponse,XPathConstants.NODESET);
					
					if(nlEntries.getLength()!=1) {
						_strError = "Response did not contain 1 'ns3:feed'";
						log.error(_strError);

						log.info("Response body: " + _strResponseBody);
						bFailOccurred = true;	
					}		
					
				} else {
					
					// we should get back an entry
					
					String strExpr2 = "ns3:entry";
					xpath.setNamespaceContext(namespaces);
					XPathExpression expr2 = xpath.compile(strExpr2);
					NodeList nlEntries = (NodeList) expr2.evaluate(_docResponse,XPathConstants.NODESET);
					
					if(nlEntries.getLength()!=1) {
						_strError = "Response did not contain 1 'ns3:entry'";
						log.error(_strError);

						log.info("Response body: " + _strResponseBody);
						bFailOccurred = true;
					}				
				}	
			}
		}

		return bFailOccurred;
	}	
	
	public boolean TestType1XPATH(Object testRunner,Object context,String strInputFile) {
	
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;

		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;

		boolean bFailure = false;
	
		log.info("**********************************************");
		log.info("** Running test TestType1XPATH for ${strInputFile} ");
		log.info("**********************************************");
			
	//	bFailure = bFailure | TestPostXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestPutXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestDeleteXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //	(should fail)
		bFailure = bFailure | TestGetROOT(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //(should fail)
	
		if(bFailure) {
			_strError = "** FAILURE: test TestType1XPATH for ${strInputFile} ";		
		} else {
			log.info("**********************************************");
			log.info("** SUCCESS: TestType1XPATH for ${strInputFile} ");
			log.info("**********************************************");			
		}
		
		return bFailure;
	}

public boolean TestType1ROOT(Object testRunner,Object context,String strInputFile) {
	
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
		
	
		boolean bFailure = false;
	
		log.info("**********************************************");
		log.info("** Running test TestType1ROOT for ${strInputFile} ");
		log.info("**********************************************");
	
//		bFailure = bFailure | TestPostROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestPutROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestDeleteROOT(true,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		bFailure = bFailure | TestGetXPATH(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //	(should fail)
		bFailure = bFailure | TestGetROOT(false,true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile); //(should fail)


		if(bFailure) {
			_strError = "** FAILURE: TestType1ROOT for ${strInputFile} ";		
		} else {
			log.info("**********************************************");
			log.info("** SUCCESS: TestType1ROOT for ${strInputFile} ");
			log.info("**********************************************");			
		}
		
		return bFailure;
	}	
	
	
	public boolean TestType2(Object testRunner,Object context,String strInputFile) {
		
	/*
	POST ROOT
	POST XPATH
	GET XPATH
	GET ROOT
	*/
		
		def project = testRunner.testCase.testSuite.project
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath	
		
		def BaseURL = project.getPropertyValue("BaseURL")
		def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
		def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
		def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
		
		def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
		def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
		
		String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
		String strSourceDataFile = projectPath + "/../data/testSets/" + strInputFile;
	
		boolean bFailure = false;
	
		//log.info("**********************************************");
		//log.info("** Processing: " + strSourceDataFile);
		//log.info("**********************************************");
	
	
		bFailure = bFailure | TestPostROOT(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
	
		bFailure = bFailure | TestPostXPATH(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
		
		bFailure = bFailure | TestGetXPATH(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile)
	
		bFailure = bFailure | TestGetROOT(true,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
		
		return bFailure;
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////
	def project = testRunner.testCase.testSuite.project
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath	
	
	def BaseURL = project.getPropertyValue("BaseURL")
	def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
	def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
	def linkPrefixForReplace = project.getPropertyValue("linkPrefixForReplace")
	
	def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
	def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
	//*********************************************************
	log.info("StartTests");
	//*********************************************************

	
	String strBaseEndpoint = ServiceEndpointDataCustodian + "/";
	String resourceTestFileName = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("resourceTestFileName");
	String resourceOutputFileName = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("resourceOutputFileName");
	String strResource = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("resource");
	String testShouldPass = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("testShouldPass");
	String testType = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("testType");
	String strSourceDataFile = projectPath + "/../data/testSets/" + resourceTestFileName;
	String strOutputDataFile = projectPath + "/../data/" + resourceOutputFileName;
	String default_access_token = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].getPropertyValue("default_access_token");


	boolean bShouldPass = true;

	testShouldPass = testShouldPass.toUpperCase();
	
	if(testShouldPass.equals("FALSE")) {
		bShouldPass = false;
	}

	boolean bFailure = false;

	ResourceTester resourceTester = new ResourceTester(log);

	try{	
		resourceTester.setAccessToken(default_access_token);

		if(testType.equals("TestType1ROOT")) {
			
			bFailure = resourceTester.TestType1ROOT(testRunner,context,resourceTestFileName);
			
		} else  if(testType.equals("TestType1XPATH")) {
			
			bFailure = resourceTester.TestType1XPATH(testRunner,context,resourceTestFileName);
			
		} else if(testType.equals("testType2")) {
			
			bFailure = resourceTester.TestType2(testRunner,context,resourceTestFileName);
			
		} else if(testType.equals("PostXPATH")) {
			
			bFailure = resourceTester.TestPostXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PostROOT")) {
			
			bFailure = resourceTester.TestPostROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PutROOT")) {
			
			bFailure = resourceTester.TestPutROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("PutXPATH")) {
			
			bFailure = resourceTester.TestPutXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
			
		} else if(testType.equals("GetXPATH")) {
			
			bFailure = resourceTester.TestGetXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile)
			
		} else if(testType.equals("GetROOT")) {
			
			bFailure = resourceTester.TestGetROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
				
		} else if(testType.equals("GetSaveResponse")) {
			
			bFailure = resourceTester.TestGetSaveResponse(bShouldPass,false,strBaseEndpoint,strResource,strOutputDataFile);
				
		} else if(testType.equals("DeleteXPATH")) {
			
			bFailure = resourceTester.TestDeleteXPATH(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
					
		} else if(testType.equals("DeleteROOT")) {
			
			bFailure = resourceTester.TestDeleteROOT(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);	
			
		} else if(testType.equals("GetROOTAndLinks")) {
			
			bFailure = resourceTester.TestGetROOTAndLinks(bShouldPass,false,strBaseEndpoint,linkPrefixForReplace,strSourceDataFile);
				
		}
		
	} catch(java.io.FileNotFoundException e) {
		resourceTester._strError = "java.io.FileNotFoundException";
		bFailure = true;
	}

	if(bFailure) {
		log.error("**********************************************");		
		testRunner.fail("Failed test '${testType}' processing resource:" + resourceTestFileName + " With error: " + resourceTester._strError)
		log.error("**********************************************");		
		testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].setPropertyValue("testFailed", "TRUE")

	} else {
		
		testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"].setPropertyValue("testFailed", "FALSE")
	}
	
	return;


	]]></script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>resourceTestFileName</con:name>
					<con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
				</con:property>
				<con:property>
					<con:name>testType</con:name>
					<con:value>GetSaveResponse</con:value>
				</con:property>
				<con:property>
					<con:name>default_access_token</con:name>
					<con:value>688b026c-665f-4994-9139-6b21b13fbeee</con:value>
				</con:property>
				<con:property>
					<con:name>testShouldPass</con:name>
					<con:value>TRUE</con:value>
				</con:property>
				<con:property>
					<con:name>resourceOutputFileName</con:name>
					<con:value>test_subscription.xml</con:value>
				</con:property>
				<con:property>
					<con:name>resource</con:name>
					<con:value>http://172.16.57.214:8080/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:value>
				</con:property>
				<con:property>
					<con:name>testFailed</con:name>
					<con:value>FALSE</con:value>
				</con:property>
				<con:property>
					<con:name>uploadFile</con:name>
					<con:value>test_usage_data.xml</con:value>
				</con:property>
				<con:property>
					<con:name>retailCustomerId</con:name>
					<con:value>1</con:value>
				</con:property>
			</con:properties>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
	<con:testSuite name="OpenEspiIntegrationTests">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="50000" name="ResourceTests" searchProperties="true" id="a536dcbe-f106-47e2-9c97-93c2d78cffa9" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
			<con:settings>
				<con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">20000</con:setting>
				<con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
			</con:settings>
			<con:testStep type="groovy" name="InitializeDataSets">
				<con:settings/>
				<con:config>
					<script><![CDATA[import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.stream.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.Transformer;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.TransformerFactory;
import java.io.IOException;

public class ConvType {
    public static final int INT_VALUE = 0;
    public static final int ENTRY = 1;
    public static final int ROOT_ENTRY= 2;
   // public static final int ENTRY_FEED = 3;
   // public static final int ROOT_ENTRY_FEED = 4;    
}

class XMLHelper {
	
	private static boolean _skipNL;

	private static String _baseEndpoint;
	private static int _retailCustomerId;
	private static int _usagePointId;
	private static int _localTimeParametersID;
	private static int _ElectricPowerUsageSummaryId;
	private static int _ElectricPowerQualitySummaryId;
	private static int _meterReadingId;
	private static int _readingTypeId;
	private static int _intervalBlockId;
	private static int _resourceId;
	private static int _subscriptionId;


	public static ConvertToEntry(String strEndpoint,Element feed,String StoragePath,Object log) {
		
		NodeList list = feed.getElementsByTagName("entry");


		XMLHelper._baseEndpoint = strEndpoint;
		XMLHelper._retailCustomerId = 1;
		XMLHelper._usagePointId = 1;
		XMLHelper._localTimeParametersID = 1;
		XMLHelper._ElectricPowerUsageSummaryId = 1;
		XMLHelper._ElectricPowerQualitySummaryId = 1;		
		XMLHelper._meterReadingId = 1;
		XMLHelper._readingTypeId = 1;
		XMLHelper._intervalBlockId = 1;
		XMLHelper._resourceId = 1;
  		XMLHelper._subscriptionId = 5;
//		XMLHelper._subscriptionId = 1;
		
		for(int i = 0 ; i < list.getLength();i++) {
			
			Element entry = (Element) list.item(i);
			NodeList content = entry.getElementsByTagName("content");
			NodeList contentChildren = content.item(0).getChildNodes();

			String strEntryName = "";
			
			for(int j = 0 ; j < contentChildren.getLength();j++) {
				
				if(contentChildren.item(j).getNodeType()==Node.ELEMENT_NODE) {
					
					Element espi = (Element) contentChildren.item(j);
					log.info("Processing node: " + espi.getNodeName());
					strEntryName = espi.getNodeName();
				}
			}
			
			String strFileName = "entry_" + strEntryName + "_" + i + ".xml";

			def file = new PrintWriter (StoragePath + strFileName)

			file.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			
			Convert(list.item(i),file,ConvType.ENTRY,strEntryName);

			file.flush();
			file.close();
		}
		
	}

	public static ConvertToRootEntry(String strEndpoint,Element feed,String StoragePath,Object log) {
		
		NodeList list = feed.getElementsByTagName("entry");


		XMLHelper._baseEndpoint = strEndpoint;
		XMLHelper._retailCustomerId = 1;
		XMLHelper._usagePointId = 1;
		XMLHelper._localTimeParametersID = 1;
		XMLHelper._ElectricPowerUsageSummaryId = 1;
		XMLHelper._ElectricPowerQualitySummaryId = 1;		
		XMLHelper._meterReadingId = 1;
		XMLHelper._readingTypeId = 1;
		XMLHelper._intervalBlockId = 1;
		XMLHelper._resourceId = 1;
		XMLHelper._subscriptionId = 1;		
		
		for(int i = 0 ; i < list.getLength();i++) {
			
			Element entry = (Element) list.item(i);
			NodeList content = entry.getElementsByTagName("content");
			NodeList contentChildren = content.item(0).getChildNodes();

			String strEntryName = "";
			
			for(int j = 0 ; j < contentChildren.getLength();j++) {
				if(contentChildren.item(j).getNodeType()==Node.ELEMENT_NODE)
				{
					Element espi = (Element) contentChildren.item(j);
					log.info("Processing node: " + espi.getNodeName());
					strEntryName = espi.getNodeName();
				}
			}
			
			String strFileName = "root_entry_" + strEntryName + "_" + i + ".xml";

			def file = new PrintWriter (StoragePath + strFileName)

			file.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			
			Convert(list.item(i),file,ConvType.ROOT_ENTRY,strEntryName);

			file.flush();
			file.close();
		}
		
	}
	
	public static Convert(Node rootNode,PrintWriter file,int convType,String strEntryName) {
		
	    String tab = "";
	    _skipNL = false;
	    boolean bHasContents = false;
	    boolean bIsESPI = false;
	    
	    PrivConvert(rootNode, file,tab,bHasContents,bIsESPI,convType,strEntryName);
	    
	}

	private static boolean listAllAttributes(Element element,PrintWriter file,int convType,String strEntryName) {
		
		boolean bHasAttribs = false;

		NamedNodeMap attributes = element.getAttributes();
		
		int numAttrs = attributes.getLength();

		for (int i = 0; i < numAttrs; i++) 
		{
			Attr attr = (Attr) attributes.item(i);
			
			String attrName = attr.getNodeName();
			
			if(!attrName.equals("xmlns"))
			{
				String attrValue = attr.getNodeValue();

				if(attrName.equals("href"))
				{
					// replace RetailCustomer with Subscription
					attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/Subscription/" + _subscriptionId);
					
					if(convType==ConvType.ENTRY)
					{

						//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
						attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}","/Subscription/" + _subscriptionId);
						attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
						attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
						attrValue = attrValue.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
						attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
						attrValue = attrValue.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);
						attrValue = attrValue.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
						attrValue = attrValue.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);
						attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);
						
					}
					else if(convType==ConvType.ROOT_ENTRY)
					{
						if(strEntryName.equals("IntervalBlock")) {

							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}/MeterReading\\/[0-9A-Fa-f]{1,20}","");						
							attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
						}
						else if(strEntryName.equals("UsagePoint")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
						}
						else if(strEntryName.equals("MeterReading")) {

							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
						}
						else if(strEntryName.equals("ElectricPowerUsageSummary")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/ElectricPowerUsageSummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerUsageSummary/" + _ElectricPowerUsageSummaryId);
								
						}
						else if(strEntryName.equals("ElectricPowerQualitySummary")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/ElectricPowerQualitySummary\\/[0-9A-Fa-f]{1,20}","/ElectricPowerQualitySummary/" + _ElectricPowerQualitySummaryId);					
						}
						else if(strEntryName.equals("LocalTimeParameters")) {
							
							attrValue = attrValue.replaceAll("/Subscription\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							//attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}/UsagePoint\\/[0-9A-Fa-f]{1,20}","");
							attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);					
						}						
						else
						{
							
//							attrValue = attrValue.replaceAll("/RetailCustomer\\/[0-9A-Fa-f]{1,20}","/RetailCustomer/" + _retailCustomerId);
							attrValue = attrValue.replaceAll("/UsagePoint\\/[0-9A-Fa-f]{1,20}","/UsagePoint/" + _usagePointId);
							attrValue = attrValue.replaceAll("/LocalTimeParameters\\/[0-9A-Fa-f]{1,20}","/LocalTimeParameters/" + _localTimeParametersID);							
							attrValue = attrValue.replaceAll("/MeterReading\\/[0-9A-Fa-f]{1,20}","/MeterReading/" + _meterReadingId);
							attrValue = attrValue.replaceAll("/ReadingType\\/[0-9A-Fa-f]{1,20}","/ReadingType/" + _readingTypeId);
							attrValue = attrValue.replaceAll("/IntervalBlock\\/[0-9A-Fa-f]{1,20}","/IntervalBlock/" + _intervalBlockId);
							attrValue = attrValue.replaceAll("/resource\\/[0-9A-Fa-f]{1,20}","/resource/" + _resourceId);							
						}					
					}

					attrValue = _baseEndpoint + attrValue;
				}
				
				file.print(" " + attrName + "=\"" + attrValue + "\"");
				
				bHasAttribs = true;
			}
		}
		
		return bHasAttribs;
		
	}
	
	private static PrivConvert(Node rootNode,PrintWriter file, String tab,boolean bHasContents,boolean bIsESPI,int convType,String strEntryName) {
		
		if(rootNode.getNodeType()==Node.ELEMENT_NODE) {

			String strNodeName = rootNode.getNodeName();

			if(bIsESPI)
			{
				strNodeName = "espi:" + strNodeName;
			}
			else
			{
				strNodeName = "ns3:" + strNodeName;	
			}
			
			file.print("\n" + tab + "<" + strNodeName);	

			if(strNodeName.equals("ns3:entry"))
			{
				file.print(" xmlns:espi=\"http://naesb.org/espi\" xmlns:ns3=\"http://www.w3.org/2005/Atom\"");
			}
			
			listAllAttributes(rootNode,file,convType,strEntryName);
		}

		if(rootNode.getNodeName().equals("content"))
		{
			bIsESPI = true;
		}

		if(rootNode.getNodeName().equals("IntervalBlock"))
		{
			_intervalBlockId++;
		}
	    
		NodeList nl = rootNode.getChildNodes();
		
		if(nl.getLength()>0) {

			bHasContents = true;
			file.print(">");
			for (int i = 0; i < nl.getLength(); i++) {
				PrivConvert(nl.item(i),file, tab + "   ",bHasContents,bIsESPI,convType,strEntryName);
			}
			
		} else {

			if(rootNode.getNodeType()!=Node.COMMENT_NODE){
				if(rootNode.getNodeValue()!=null) {
					
					file.print(rootNode.getNodeValue().trim());
		
					if(rootNode.getNodeValue().trim() !="") {
						bHasContents = true;
						_skipNL = true;
					} else {
						_skipNL = false;
					}
				} else {
					
					bHasContents = false;
					_skipNL = true;
				}				
			}

		}
	    
		if(rootNode.getNodeType()==Node.ELEMENT_NODE){
			
			if(!_skipNL) {
				file.print("\n" + tab);
			}
			
			_skipNL = false;
			
			if(bHasContents) {

				String strNodeName = rootNode.getNodeName();

				if(strNodeName.equals("content"))
				{
					bIsESPI = false;
				}
	
				if(bIsESPI)
				{
					strNodeName = "espi:" + strNodeName;
				}
				else
				{
					strNodeName = "ns3:" + strNodeName;	
				}	
				
				file.print("</"+strNodeName+">");
				
			} else {
				file.print("/>");
			}
		}
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	def project = testRunner.testCase.testSuite.project;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	def projectPath = groovyUtils.projectPath	
	
	def BaseURL = project.getPropertyValue("BaseURL")
	def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
	def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
	def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
	def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
	
	def TestFile = projectPath + "/../data/" + project.getPropertyValue("TestFile");
	def String StoragePath = projectPath + "/../data/testSets/";

	//ServiceEndpointDataCustodian = ServiceEndpointDataCustodian.replace("http:","https:");
	
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	DocumentBuilder db = dbf.newDocumentBuilder();	
	
	try {
			
		Document doc = db.parse(TestFile);
		Element feed = doc.getDocumentElement();
		
		XMLHelper.ConvertToEntry(ServiceEndpointDataCustodian,feed,StoragePath,log);
		//XMLHelper.ConvertToRootEntry(ServiceEndpointDataCustodian,feed,StoragePath,log);
		
		
	}
	catch(ParserConfigurationException pce) {
		//pce.printStackTrace();
		log.error("Parser configureation exception occurred");
	}
	catch(SAXException se) {
		//se.printStackTrace();
		log.error("SAX exception occurred");
	}
	catch(IOException ioe) {
		//ioe.printStackTrace();
		log.error("IO exception occurred");
	}
	
	return;]]></script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="testType1_RestVerbs after XPATH Posts">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;


public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	def project = testRunner.testCase.testSuite.project

	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("default_access_token",project.getPropertyValue("data_custodian_access_token"));

	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Create Subscription to use in path methods
	testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);


	boolean bTestFailed =false;


	bTestFailed = ServiceTest("PostXPATH",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_ReadingType_3.xml");
	
	bTestFailed = ServiceTest("PostXPATH",true,"entry_UsagePoint_0.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_MeterReading_2.xml");	
	bTestFailed = ServiceTest("PostXPATH",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("PostXPATH",true,"entry_ElectricPowerQualitySummary_19.xml");

	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_UsagePoint_0.xml");

	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("TestType1XPATH",true,"entry_ReadingType_3.xml");


	return;
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts (link UP after POST)">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;

import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");




public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

	boolean bTestFailed =false;


	bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");

	// First test LocalTimeParamters and ReadingType in isolation
//	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
//	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	
	// put back key resources to enable rest of resource tests
//	bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
//	bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");

	bTestFailed = ServiceTest("PostROOT",true,"entry_UsagePoint_0.xml");


	//*********************************************************
	log.info("Link UsagePoint to RetailCustomer and Subscription");
	//*********************************************************
	DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
	
	try{
		// Browser Init
		driver.Before();
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.logStep("Given a Retail Customer with Usage Points");
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
		driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");
	
		// add usage point linkage
		driver.findElement(By.linkText("Customer List")).click();
		driver.findElement(By.linkText(TestRetailCustomer)).click();	
		driver.findElement(By.partialLinkText("Add Usage")).click();	
		driver.findElement(By.id("UUID")).clear();
		driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
		driver.findElement(By.name("create")).click();
	
	} catch(Exception e) {
		testRunner.fail(driver.getErrorString())
	}

	//Close the browser
	driver.quit();	

	// Create Subscription to use in path methods
	testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);
	//*********************************************************
	//*********************************************************


	bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
	bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");


	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	
	
	return;</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts (link UP before POST)">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;

import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");




public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////
/*

*/
	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

	bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");


	DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
	
	try{
		// Browser Init
		driver.Before();
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.logStep("Given a Retail Customer with Usage Points");
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
		driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");
	
		// add usage point linkage
		driver.findElement(By.linkText("Customer List")).click();
		driver.findElement(By.linkText(TestRetailCustomer)).click();	
		driver.findElement(By.partialLinkText("Add Usage")).click();	
		driver.findElement(By.id("UUID")).clear();
		driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
		driver.findElement(By.name("create")).click();
	
	} catch(Exception e) {
		testRunner.fail(driver.getErrorString())
	}

	//Close the browser
	driver.quit();	

	// Create Subscription to use in path methods
	testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);
	//*********************************************************
	//*********************************************************

	bTestFailed = ServiceTest("PostROOT",true,"entry_UsagePoint_0.xml");
	
	bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
	bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	
	
	return;</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="testType1_RestVerbs after ROOT Posts (POST UP via XPATH)">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;




public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////
/*

*/
	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Create Subscription to use in path methods
	testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);

	bTestFailed = ServiceTest("PostROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ReadingType_3.xml");

	bTestFailed = ServiceTest("PostXPATH",true,"entry_UsagePoint_0.xml");
	
	bTestFailed = ServiceTest("PostROOT",true,"entry_MeterReading_2.xml");	
	bTestFailed = ServiceTest("PostROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("PostROOT",true,"entry_ElectricPowerQualitySummary_19.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_IntervalBlock_4.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_UsagePoint_0.xml");

	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("TestType1ROOT",true,"entry_ReadingType_3.xml");	
	
	return;</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="testType3_SequentialUploads">
				<con:settings/>
				<con:config>
					<script>import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map&lt;String, String> PREF_MAP = new HashMap&lt;String, String>();

    public SimpleNamespaceContext(final Map&lt;String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}


///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap&lt;String, String> prefMap = new HashMap&lt;String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);	

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

	log.info("*********************************************************");
	log.info("upload usage data 1 using curl");
	log.info("*********************************************************");
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"];
	tc.setPropertyValue("uploadFile", "Meter_Data_12-30-2013_01-05-2014.xml");
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['curlUpload']);

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,"espi/1_1/resource/IntervalBlock","test_get_block.xml");	
	String strOutputDataFile = projectPath + "/../data/" + "test_get_block.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=2)
		{
			log.error("Response did not contain the correct number of Entries.");
		}

		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalBlocks");	
		if(nlNodes.getLength()!=2)
		{
			log.error("Response did not contain the correct number of IntervalBlocks.");
		}		

		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock/espi:IntervalReading";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalReadings");
		if(nlNodes.getLength()!=20160)
		{
			log.error("Response did not contain the correct number of IntervalReadings.");
		}	

		try{
 
	    		File file = new File(strOutputDataFile);
	 
	    		file.delete();
 
	    	} catch(Exception e) {
	 
	    		log.error("Error deleing temp file:" + e.getMessage());
	    	}
				
	}
	else
	{
		return;
	}

	log.info("*********************************************************");
	log.info("upload usage data 2 using curl");
	log.info("*********************************************************");
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"];
	tc.setPropertyValue("uploadFile", "Meter_Data_01-06-2014_01-12-2014.xml");
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['curlUpload']);

	bTestFailed = ServiceTest("GetSaveResponse",true,null,"espi/1_1/resource/IntervalBlock","test_get_block2.xml");	
	strOutputDataFile = projectPath + "/../data/" + "test_get_block2.xml";
	strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry";
		XPathExpression expr = xpath.compile(strExpr);
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=4)
		{
			log.error("Response did not contain the correct number of Entries.");
		}
		
		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalBlocks");
		if(nlNodes.getLength()!=4)
		{
			log.error("Response did not contain the correct number of IntervalBlocks.");
		}				

		strExpr = "/ns3:feed/ns3:entry/ns3:content/espi:IntervalBlock/espi:IntervalReading";
		expr = xpath.compile(strExpr);
		nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " IntervalReadings");
		if(nlNodes.getLength()!=40320)
		{
			log.error("Response did not contain the correct number of IntervalReadings.");
		}		

		try{
 
	    		File file = new File(strOutputDataFile);
	 
	    		file.delete();
 
	    	} catch(Exception e) {
	 
	    		log.error("Error deleing temp file:" + e.getMessage());
	    	}		
	}
	else
	{
		return;
	}

	return;
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="testType2_embeddedLinkTests">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;



public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}


/*
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=projectPath + "/../data/" + project.getPropertyValue("TestFile")
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

Object driver = this.class.classLoader.parseClass(new File(projectPath + "/etc/BaseStepUtils.groovy")).GetObj(BaseURL,DataCustodianContext,ThirdPartyContext,log);
*/

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

	//*********************************************************
	log.info("Init DB");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);

	log.info("*********************************************************");
	log.info("upload usage data using curl");
	log.info("*********************************************************");
	// reset DB : run library groovy script

	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["GeneralScripts"]
	tc.setPropertyValue("uploadFile", "test_usage_data.xml")	
	tc.setPropertyValue("retailCustomerId","1")
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['curlUpload']);
	
	// Create Subscription to use in path methods
	testRunner.testCase.testSuite.project.testSuites['Library'].testCases['AuthorizeSubcscription'].run(null, false);


/*
	try{
		// Browser Init
		driver.Before();
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.logStep("Link Usage Point to Retail Customer");
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
		driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");
		
		// add usage point linkage
		driver.findElement(By.linkText("Customer List")).click();
		driver.findElement(By.linkText(TestRetailCustomer)).click();	
		driver.findElement(By.partialLinkText("Add Usage")).click();	
		driver.findElement(By.id("UUID")).clear();
		driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
		driver.findElement(By.id("description")).clear();
		driver.findElement(By.id("description")).sendKeys(usagePointDescription1);
		driver.findElement(By.name("create")).click();
	
		// upload usage point file
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		driver.logStep("upload usage point file");
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		driver.findElement(By.linkText("Upload")).click();	
		driver.findElement(By.name("file")).sendKeys(TestFile);
			
		driver.findElement(By.name("upload")).click();	
		driver.assertDoesNotContain("Unable to process file");
		
		driver.logout(ServiceEndpointDataCustodian);
	
	} catch(Exception e) {
		testRunner.fail(driver.getErrorString())
	}
	
	//Close the browser
	driver.quit();
*/

	log.info("*********************************************************");
	log.info("GETS and get links");
	log.info("*********************************************************");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_UsagePoint_0.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_LocalTimeParameters_1.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_MeterReading_2.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ReadingType_3.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ElectricPowerUsageSummary_18.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_ElectricPowerQualitySummary_19.xml");
	bTestFailed = ServiceTest("GetROOTAndLinks",true,"entry_IntervalBlock_4.xml");

	return;
</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Retail Customers" searchProperties="true" id="fa3949ff-a0a7-4274-ace9-674a8169ebd4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
			<con:settings/>
			<con:testStep type="groovy" name="Feature: Retail Customers">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Retail Customers");
log.info("  As a Retail Customer,");
log.info("  I want to be able to view my usage point in my browser");
log.info("  So that I can see my UsagePoints");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Usage Points access (reg UP before upload)">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;

import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

driver._bLogActions = true;


try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Usage Points access");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

/*
 * 	old software behaved differently- it would route the use to the DC page
 * 	Instread of showwing no authorized usage points
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Usage Points")).click();	
*/

	// Corrected to the following step
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Data Custodians page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Data Custodian selection page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlEndsWith("/DataCustodianList");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();		

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Usage Points")).click();	        
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a Usage Point");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains(usagePointDescription1);
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();


</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Usage Points access">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Usage Points access");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

/*
 * 	old software behaved differently- it would route the use to the DC page
 * 	Instread of showwing no authorized usage points
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Usage Points")).click();	
*/

	// Corrected to the following step
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Data Custodians page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Data Custodian selection page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlEndsWith("/DataCustodianList");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();		

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Usage Points")).click();	        
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a Usage Point");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains(usagePointDescription1);
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();


</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer views Usage Points with Meter Readings">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;


try{
	//*********************************************************
	log.info("Scenario: Retail Customer views Usage Points with Meter Readings");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////  
	driver.logStep("Given a Retail Customer with Usage Points");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
/*
 * 	old software behaved differently- it would route the use to the DC page
 * 	Instread of showwing no authorized usage points
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Usage Points")).click();	
*/

	// Corrected to the following step
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I look at my Data Custodians page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I should see Data Custodian selection page");
	///////////////////////////////////////////////////////////
	driver.assertUrlEndsWith("/DataCustodianList");
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	///////////////////////////////////////////////////////////
//	driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	///////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I look at my Usage Points page");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Usage Points")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see a Usage Point");
	///////////////////////////////////////////////////////////
	driver.assertContains(usagePointDescription1);
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Usage Point");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText(usagePointDescription1)).click();	        
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Usage Point details");
	///////////////////////////////////////////////////////////
	driver.assertContains("Usage Summaries");
	driver.assertContains("Quality Summaries");
	driver.assertContains("Local time zone offset from UTCTime");
	driver.assertContains("-18000");
	        
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Meter Reading");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Fifteen Minute Electricity Consumption")).click();
		        
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Meter Reading details");
	///////////////////////////////////////////////////////////
	driver.assertContains("Fifteen Minute Electricity Consumption");
	driver.assertContains("Type of Meter Reading Data");
	driver.assertContains("86400");
	driver.assertContains("974");
	driver.assertContains("900");
	driver.assertContains("965");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Scope">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Scope");
	//*********************************************************  
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////  
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Third Party");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	///////////////////////////////////////////////////////////
//	driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	///////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");


} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer denies Scope">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer denies Scope");
	//********************************************************* 
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Third Party");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Data Custodian from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I deny Third Party");
	///////////////////////////////////////////////////////////
//	driver.findElement(By.name("deny")).click();
	driver.findElement(By.xpath("html/body/div[2]/form/ul/li/input[2]")).click();	
	driver.findElement(By.name("authorize")).click();
	
	/// 
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should be redirected to the home page");
	///////////////////////////////////////////////////////////
	driver.assertUrlContains("RetailCustomer");
	driver.assertUrlEndsWith("/home");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Scope from Data Custodian">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();

def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Scope from Data Custodian");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Third Party from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Third Parties")).click();
	driver.findElement(By.className("third-party")).click();
	driver.findElement(By.name("next")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	///////////////////////////////////////////////////////////
//	driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	///////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer denies Scope from Data Custodian">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Retail Customer denies Scope from Data Custodian");
	//*********************************************************  
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Given I have a Retail Customer account");
	///////////////////////////////////////////////////////////
	// Seed Data
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing into Data Custodian");
	///////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestRetailCustomer,TestRetailCustomerPW);
	
	///////////////////////////////////////////////////////////
	driver.logStep("And I select a Third Party from the list");
	///////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Third Parties")).click();
	driver.findElement(By.className("third-party")).click();
	driver.findElement(By.name("next")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I log into Third Party");
	///////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);
	driver.findElement(By.name("submit")).click();
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	///////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	///////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
	
	///////////////////////////////////////////////////////////
	driver.logStep("When I deny Third Party");
	///////////////////////////////////////////////////////////
//	driver.findElement(By.name("deny")).click();		
	driver.findElement(By.xpath("html/body/div[2]/form/ul/li/input[2]")).click();	
	driver.findElement(By.name("authorize")).click();

	
	///////////////////////////////////////////////////////////
	driver.logStep("Then I should be redirected to the home page");
	///////////////////////////////////////////////////////////
	driver.assertUrlContains("RetailCustomer");
	driver.assertUrlEndsWith("/home");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();


</script></con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Notification" searchProperties="true" id="0b86062c-c041-4957-b41a-22a9fcb7ad41" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
			<con:settings/>
			<con:testStep type="groovy" name="Feature: Notification">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Notification");
log.info("  As Data Custodian,");
log.info("  I should be able to notify Third Party about data updates,");
log.info("  So Third Party can download updated data");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Data Custodian notifies Third Party of updated Subscription">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


def TestFile2=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile2"))).getAbsolutePath();
def usagePointUUID2 = project.getPropertyValue("usagePointUUID2");
def usagePointDescription2 = project.getPropertyValue("usagePointDescription2");

//driver._bLogActions = true;
// how long to wait between each execution step
//driver._iSleepBetweenStepsMs = 3000;

try{
	//*********************************************************
	log.info("Scenario: Data Custodian notifies Third Party of updated Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And a Third Party with an updated subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);
	
	driver.findElement(By.linkText("Batch Lists")).click();
	driver.assertDoesNotContain("Whoops");

	log.info("The following step may take up to 30 seconds to complete.");
	int OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
	log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();

	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	
	//driver.findElement(By.name("authorize")).click();	
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
	
	driver.logout(ServiceEndpointDataCustodian);

	driver.logout(ServiceEndpointThirdParty);
	
	driver.login(ServiceEndpointDataCustodian, TestManager,TestManagerPW);
	
	// upload usage point file Sweet Usage Point
	driver.findElement(By.linkText("Upload")).click();		
	driver.findElement(By.name("file")).sendKeys(TestFile2);
	driver.findElement(By.name("upload")).click();	
	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();		
	driver.findElement(By.linkText(TestRetailCustomer)).click();		
	driver.findElement(By.partialLinkText("Add Usage")).click();
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID2);
	driver.findElement(By.name("create")).click();	

	driver.logout(ServiceEndpointDataCustodian);


	// Check for Notifications
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);
	
	driver.findElement(By.linkText("Batch Lists")).click();
	driver.assertDoesNotContain("Whoops");

	log.info("The following step may take up to 30 seconds to complete.");
	OriginalnumberOfSubscriptions = driver.GetNumElsByTagName("h2");
	log.info("Original number of subscriptions=" + OriginalnumberOfSubscriptions);

	if(OriginalnumberOfSubscriptions != 1)
	{
		log.error("did not see autogenerated notification from subscription creation");
		testRunner.fail("unexpected number of subscriptions");
	}

	driver.logout(ServiceEndpointThirdParty);



	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I notify the Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.findElement(By.linkText("Notify Third Party")).click();	
        
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then the Third Party should be notified of the update");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logout(ServiceEndpointDataCustodian);
	driver.login(ServiceEndpointThirdParty,TestManager,TestManagerPW);

	driver.assertContains("Welcome");

	driver.findElement(By.linkText("Batch Lists")).click();

	int numberOfSubscriptions = driver.GetNumElsByTagName("h2");

	log.info("New number of subscriptions=" + numberOfSubscriptions);

	if( (numberOfSubscriptions-OriginalnumberOfSubscriptions) != 2)
	{
		log.error("unexpected number of subscriptions");
		testRunner.fail("unexpected number of subscriptions");
	}

	driver.assertContains("/espi/1_1/resource/Batch/Subscription/");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

</script></con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: Subscription" searchProperties="true" id="d7224ab1-0cfd-4bae-b06b-87490390bdc2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
			<con:settings/>
			<con:testStep type="groovy" name="Feature: Subscription">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Subscription");
log.info("  As a Third Party");
log.info("  I want to access Retail Customer data");
log.info("  So that I can display Retail Customer data");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Third Party accesses Subscription">
				<con:settings/>
				<con:config><script><![CDATA[import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

import org.xml.sax.SAXException;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.namespace.NamespaceContext;


public class SimpleNamespaceContext implements NamespaceContext {

    private final Map<String, String> PREF_MAP = new HashMap<String, String>();

    public SimpleNamespaceContext(final Map<String, String> prefMap) {
        PREF_MAP.putAll(prefMap);       
    }

    public String getNamespaceURI(String prefix) {
        return PREF_MAP.get(prefix);
    }

    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}

public boolean ServiceTest(String strTestType,boolean bShouldPass,String strFileName,String strResource,String strOutputFile)
{
	tc = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["ResourceTestScripts"]
	tc.setPropertyValue("resourceTestFileName", strFileName)
	tc.setPropertyValue("testType", strTestType)
	tc.setPropertyValue("resourceOutputFileName", strOutputFile)
	tc.setPropertyValue("resource", strResource)
	
	if(bShouldPass) {
		tc.setPropertyValue("testShouldPass", "TRUE")
	}
	else {
		tc.setPropertyValue("testShouldPass", "FALSE")
	}
	
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['ResourceTestScripts'].testSteps['resourceTests']);

	String strResult = tc.getPropertyValue("testFailed");	

	boolean bResult = false;
	
	if(strResult.equals("TRUE")) {
		bResult = true;
	}

	return bResult;
}




def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


	DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
	domFactory.setNamespaceAware(true); 
	DocumentBuilder builder = domFactory.newDocumentBuilder();

	XPath xpath = XPathFactory.newInstance().newXPath();
	
	// add namespaces
	HashMap<String, String> prefMap = new HashMap<String, String>() {{
	    put("espi", "http://naesb.org/espi");
	    put("ns3", "http://www.w3.org/2005/Atom");
	}};
	
	SimpleNamespaceContext namespaces = new SimpleNamespaceContext(prefMap);
	
	xpath.setNamespaceContext(namespaces);

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;
//driver._iSleepBetweenStepsMs = 2000;

try{
	//*********************************************************
	log.info("Scenario: Third Party accesses Subscription");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");

		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	

	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.logStep("And I log in as Alan Turing into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(driver.DATA_CUSTODIAN_CONTEXT, "alan", "koala");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I request a Subscription using the REST API");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Authorizations")).click();	

	List<WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
		
	String subscription = rows.get(rows.size() - 1).getText();
	
//	driver.get(subscription);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should receive XML for that Subscription");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	driver.assertXpathExists("/:feed");

	boolean bTestFailed = ServiceTest("GetSaveResponse",true,null,subscription,"test_subscription.xml");
	
	String strOutputDataFile = projectPath + "/../data/" + "test_subscription.xml";
	String strExpr = "";
	
	if(!bTestFailed){

		Document docResponse = builder.parse(strOutputDataFile);

		strExpr = "/ns3:feed/ns3:entry[ns3:id='urn:uuid:" + usagePointUUID1.toLowerCase() + "']";
	
		XPathExpression expr = xpath.compile(strExpr);
		
		NodeList nlNodes = (NodeList) expr.evaluate(docResponse,XPathConstants.NODESET);

		log.info("Retreived " + nlNodes.getLength() + " Entries");
		if(nlNodes.getLength()!=1)
		{
			log.error("Response did not contain the correct number of Entries.");
			testRunner.fail("Response did not contain the correct number of Entries.")
		}
	}
	else
	{
		log.error("Unable to GET subscription resource.");
		testRunner.fail("Unable to GET subscription resource.")		
	}
	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();

]]></script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Third Party customer accesses Authorizations page">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	//*********************************************************
	log.info("Scenario: Third Party customer accesses Authorizations page");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given an authorized Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
	
	driver.submitLoginForm(TestRetailCustomer,TestRetailCustomerPW);
	
	driver.findElement(By.name("scope")).click();	
	driver.findElement(By.name("next")).click();	

	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=900;BlockDuration=monthly;HistoryLength=13")).click();	
	driver.findElement(By.name("authorize")).click();	

	// logout of Third Party	
	driver.logout(ServiceEndpointThirdParty);

	// logout of DataCustodian	
	driver.logout(ServiceEndpointDataCustodian);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log in as Alan Turing");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
	driver.assertContains("Welcome");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("And I navigate to the Authorizations page");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Authorizations")).click();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");

	List&lt;WebElement> rows = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String subscription = rows.get(rows.size() - 1).getText();

	driver.AssertStringNotEmpty(subscription);
	
	List&lt;WebElement> rows2 = driver.FindElementsByXpath("//td[@class='subscription_id']");
	String access_token = rows2.get(rows2.size() - 1).getText();	

	driver.AssertStringNotEmpty(access_token);	

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feature: OAuth" searchProperties="true" id="fb28775f-2f52-4441-9dd0-0b9b7e7aba02" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
			<con:settings/>
			<con:testStep type="groovy" name="Feature: OAuth">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: OAuth");
log.info("As Retail Customer, I should be able to see Data Custodian list");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer views Data Custodian list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I navigate to Data Custodian list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Data Custodians");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("data_custodian");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{

	//*********************************************************
	log.info("Scenario: Retail Customer selects Data Custodian for the list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
        
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer selects Scope">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer selects Scope");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party">
				<con:settings/>
				<con:config><script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);


//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Third Party");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	driver.findElement(By.name("Data_custodian")).click();
	driver.findElement(By.name("next")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.findElement(By.name("authorize")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script></con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="API" searchProperties="true" id="545b3d0d-00cc-4724-98ae-351af13fccb5">
			<con:description>API Tests based on Role</con:description>
			<con:settings/>
			<con:testStep type="calltestcase" name="Run TestCase EstablishTwoSubscriptions">
				<con:settings/>
				<con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:targetTestCase>842a41c8-96fb-4b15-bab5-c26d1f3f0dba</con:targetTestCase>
					<con:properties/>
					<con:returnProperties/>
					<con:runMode>PARALLELL</con:runMode>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Feature: Data Custodian Admin API">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Data Custodian Admin API");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Authorization Feed">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Authorization by Id">
				<con:settings/>
				<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Authorization by Id" mediaType="Application/atom+xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="authorizationId" value="1"/>
							<con:entry key="Content-Type" value="Application/atom+xml"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET UsagePoint Feed - Request 1">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint" methodName="GET UsagePoint Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET UsagePoint Feed - Request 1" mediaType="application/json" id="19aaf2a0-c8b0-45c3-b56b-3f17a2439839">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/1/UsagePoint</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET UsagePoint by Id - Request 1">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint/{usagePointId}" methodName="GET UsagePoint by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET UsagePoint by Id - Request 1" mediaType="application/json" id="60f67287-8953-45c9-872d-a7fc6eeb63af">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
							<con:entry>subscriptionId</con:entry>
							<con:entry>usagePointId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Feature: Third Party Admin API">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Third Party Admin API");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Authorization - third_party_access">
				<con:settings/>
				<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Authorization - third_party_access" mediaType="Application/atom+xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/5</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
							<con:entry key="authorizationId" value="5"/>
							<con:entry key="Content-Type" value="Application/atom+xml"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Authorization - third_party_access of User Authorization Subscription 6">
				<con:settings/>
				<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Authorization - third_party_access of User Authorization Subscription 6" mediaType="Application/atom+xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/6</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
							<con:entry key="authorizationId" value="6"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Authorization - third_party_access of User Authorization Subscription 5">
				<con:settings/>
				<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Authorization - third_party_access of User Authorization Subscription 5" mediaType="Application/atom+xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/5</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
							<con:entry key="authorizationId" value="5"/>
							<con:entry key="Content-Type" value="Application/atom+xml"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="[NEG] GET Authorization - third_party_access of User Authorization for DC">
				<con:settings/>
				<con:config service="ESPI Resources" methodName="GET Authorization by Id" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="[NEG] GET Authorization - third_party_access of User Authorization for DC" mediaType="Application/atom+xml">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400,403</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
							<con:entry key="authorizationId" value="1"/>
							<con:entry key="Content-Type" value="Application/atom+xml"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="[NEG] GET - Subscription/{subscriptionId}">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}" methodName="Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="[NEG] GET - Subscription/{subscriptionId}" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/6</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400,404</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="subscriptionId" value="6" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>subscriptionId</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Batch/Subscription/{subscriptionId}">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Batch/Subscription/{subscriptionId}" mediaType="application/json">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="subscriptionID" value="1" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET ServiceStatus">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET ServiceStatus" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer ${#Project#third_party_access_token}" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Feature: Third Party User Subscription API">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Third Party User Subscription API");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET LocalTimeParameters Feed">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/LocalTimeParameters" methodName="GET LocalTimeParameters Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET LocalTimeParameters Feed" mediaType="application/json" id="03bcb211-9b20-4f13-a3d5-ba0897166d66">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/LocalTimeParameters</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer ${#Project#userAccessToken2}" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>Content-Type</con:entry>
							<con:entry>Authorization</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET LocalTimeParameters by Id">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/LocalTimeParameters/{localTimeParametersId}" methodName="GET LocalTimeParameters by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET LocalTimeParameters by Id" mediaType="application/json" id="992b9d02-a55d-4839-bbe9-fad896b41aeb">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/LocalTimeParameters/1</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
							<con:entry key="Content-Type" value="application/atom+xml"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>localTimeParametersId</con:entry>
							<con:entry>Content-Type</con:entry>
							<con:entry>Authorization</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Get root ReadingType feed">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadingType" methodName="Get root ReadingType feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Get root ReadingType feed" mediaType="application/json" id="b16590e5-f966-4442-be59-1354fbfc5c43">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadingType</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="Get ReadingType by Id">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadingType/{readingTypeId}" methodName="Get ReadingType by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="Get ReadingType by Id" mediaType="application/json" id="8a301fd3-0ea4-46bb-b3bd-6d934d52b57c">
						<con:encoding/>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadingType/1</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>readingTypeId</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET {subscriptionId} id 5 with AccessToken1">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET {subscriptionId} id 5 with AccessToken1" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="subscriptionID" value="5"/>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="[NEG] GET {subscriptionId} id 6 with AccessToken1">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="[NEG] GET {subscriptionId} id 6 with AccessToken1" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/6</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400,403</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
							<con:entry key="subscriptionID" value="6"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET {subscriptionId} User 6 with AccessToken2">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET {subscriptionId} User 6 with AccessToken2" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/6</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="subscriptionID" value="6"/>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="[NEG] GET {subscriptionId} id 5 with AccessToken2">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="[NEG] GET {subscriptionId} id 5 with AccessToken2" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>400,403</codes>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="subscriptionID" value="5"/>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET UsagePoint Path by Id">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint/{usagePointId}" methodName="GET UsagePoint by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET UsagePoint Path by Id" mediaType="application/json" id="60f67287-8953-45c9-872d-a7fc6eeb63af">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/5/UsagePoint/1</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
							<con:entry key="usagePointId" value="1"/>
							<con:entry key="subscriptionId" value="5"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
							<con:entry>subscriptionId</con:entry>
							<con:entry>usagePointId</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET MeterReading Feed by Path">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Subscription/{subscriptionId}/UsagePoint/{usagePointId}/MeterReading" methodName="GET MeterReading Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET MeterReading Feed by Path" mediaType="application/json" id="f5aa923b-979f-4e19-8939-779f508ba6b3">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Subscription/6/UsagePoint/2/MeterReading</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#userAccessToken2}"/>
							<con:entry key="usagePointId" value="2"/>
							<con:entry key="subscriptionId" value="6"/>
						</con:parameters>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Feature: Upload Admin API">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Upload API");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="[NEG] upload_access_tokenGET ServiceStatus">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="[NEG] upload_access_tokenGET ServiceStatus" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>200</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer ${#Project#upload_access_token}" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Feature: Registration Third Party API">
				<con:settings/>
				<con:config>
					<script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: Registration Third Party API");
//******************************************************************************************************************
//******************************************************************************************************************
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="[NEG] registration_third_party_access_token GET ServiceStatus">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="[NEG] registration_third_party_access_token GET ServiceStatus" mediaType="application/json">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes">
							<con:configuration>
								<codes>403</codes>
							</con:configuration>
						</con:assertion>
						<con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}" xmlns="http://eviware.com/soapui/config"/>
						</con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:properties/>
	</con:testSuite>
<con:testSuite name="Green Button Connect My Data"><con:description>This test suite collects GBCMD tests by function block.

It is currently a limited starting point with a lot of detail to be added.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_3] Core Green Button Connect My Data" searchProperties="true" id="72095d31-0ede-4d94-8b88-dfe552917235"><con:settings/><con:testStep type="calltestcase" name="Run TestCase EstablishTwoSubscriptions">
				<con:settings/>
				<con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:targetTestCase>842a41c8-96fb-4b15-bab5-c26d1f3f0dba</con:targetTestCase>
					<con:properties/>
					<con:returnProperties/>
					<con:runMode>PARALLELL</con:runMode>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Feature: DC Admin Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: DC Admin Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="[POS][D] GET ApplicationInformation by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][D] GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
							<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters><entry key="applicationInformationId" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][D] GET Authorization Feed"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][D] GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][D] GET Authorization by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][D] GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters/>
							<con:parameterOrder>
								<con:entry>authorizationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][D] GET Batch/Subscription/{subscriptionId}"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][D] GET Batch/Subscription/{subscriptionId}" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
								<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters>
									<entry key="subscriptionID" value="${#Project#subscriptionID}" xmlns="http://eviware.com/soapui/config"/>
								</con:parameters>
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:credentials>
									<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
									<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:parameterOrder>
									<con:entry>subscriptionID</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][D] GET ServiceStatus"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][D] GET ServiceStatus" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters/>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Feature: TP Registration Token Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: TP Registration Token Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="[POS][R] GET ApplicationInformation by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][R] GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
							<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="applicationInformationId" value="2"/>
</con:parameters>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][R] GET Authorization Feed"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][R] GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][R] GET Authorization by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][R] GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
							<con:parameterOrder>
								<con:entry>authorizationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][R] GET Batch/Subscription/{subscriptionId}"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][R] GET Batch/Subscription/{subscriptionId}" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
								<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="subscriptionID" value="${#Project#subscriptionID}"/>
</con:parameters>
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:credentials>
									<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
									<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:parameterOrder>
									<con:entry>subscriptionID</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][R] GET ServiceStatus"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][R] GET ServiceStatus" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Feature: TP Admin Token Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: TP Admin Token Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][C] GET ApplicationInformation by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][C] GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
							<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
  <con:entry key="applicationInformationId" value="2"/>
</con:parameters>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][C] GET Authorization Feed"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][C] GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match 1"><con:configuration><path>declare namespace espi="http://naesb.org/espi"
declare namespace ns3="http://www.w3.org/2005/Atom"
count(/ns3:feed/ns3:entry/ns3:content/espi:Authorization)</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer ${#Project#third_party_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][C] GET Authorization by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][C] GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters><entry key="Authorization" value="Bearer ${#Project#third_party_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
							<con:parameterOrder>
								<con:entry>authorizationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][C] GET Batch/Subscription/{subscriptionId}"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][C] GET Batch/Subscription/{subscriptionId}" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
								<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters>
  <con:entry key="subscriptionID" value="${#Project#subscriptionID}"/>
  <con:entry key="Authorization" value="Bearer ${#Project#third_party_access_token}"/>
</con:parameters>
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:credentials>
									<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
									<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:parameterOrder>
									<con:entry>subscriptionID</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][C] GET ServiceStatus"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][C] GET ServiceStatus" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer ${#Project#third_party_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Feature: TP User Token Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: TP User Token Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][A] GET ApplicationInformation by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" methodName="GET ApplicationInformation by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][A] GET ApplicationInformation by Id" mediaType="application/json" id="0d460b8f-6180-470f-8743-6566120cacb6">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri>
							<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
								<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
								<con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
  <con:entry key="applicationInformationId" value="2"/>
</con:parameters>
							<con:parameterOrder>
								<con:entry>applicationInformationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][A] GET Authorization Feed"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization" methodName="GET Authorization Feed" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][A] GET Authorization Feed" mediaType="application/json" id="78372758-3493-4c0e-925a-ffff58d1cb41">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][A] GET Authorization by Id"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Authorization/{authorizationId}" methodName="GET Authorization by Id" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][A] GET Authorization by Id" mediaType="application/json" id="993a9960-3a59-47d1-a7bb-5fc3850ffcf9">
							<con:settings>
								<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
							</con:settings>
							<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
							<con:request/>
							<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Authorization/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
								<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
							</con:credentials>
							<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
							<con:jmsPropertyConfig/>
							<con:parameters><entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
							<con:parameterOrder>
								<con:entry>authorizationId</con:entry>
								<con:entry>Authorization</con:entry>
								<con:entry>Content-Type</con:entry>
							</con:parameterOrder>
						</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[POS][A] GET Batch/Subscription/{subscriptionId}"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[POS][A] GET Batch/Subscription/{subscriptionId}" mediaType="application/json" id="76860f30-073d-4f94-be07-2f0a3435b146">
								<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
								<con:request/>
								<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/Batch/Subscription/5</con:originalUri>
								<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
								<con:jmsPropertyConfig/>
								<con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#userAccessToken1}"/>
  <con:entry key="subscriptionID" value="${#Project#subscriptionID}"/>
</con:parameters>
								<con:settings>
									<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
								</con:settings>
								<con:credentials>
									<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
									<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
									<con:authType>Global HTTP Settings</con:authType>
								</con:credentials>
								<con:parameterOrder>
									<con:entry>subscriptionID</con:entry>
									<con:entry>Authorization</con:entry>
									<con:entry>Content-Type</con:entry>
								</con:parameterOrder>
							</con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG][A] GET ServiceStatus"><con:settings/><con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/ReadServiceStatus" methodName="GET ServiceStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG][A] GET ServiceStatus" mediaType="application/json" id="60e1ff43-7b61-4173-9448-051a3c6ddf48">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:originalUri>http://localhost/DataCustodian/espi/1_1/resource/ReadServiceStatus</con:originalUri>
						<con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes"><con:configuration><codes>403</codes></con:configuration></con:assertion><con:credentials>
							<con:selectedAuthProfile>Basic</con:selectedAuthProfile>
							<con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters><entry key="Authorization" value="Bearer ${#Project#userAccessToken1}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
						<con:parameterOrder>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_13] Security and Privacy" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="[TR_TC001] Test software shall issue a service request over an SSL session and shall verify that the response HTTP header contains the following fields and information.">
				<con:settings/>
				<con:config method="GET" xsi:type="con:HttpRequest" name="[TR_TC001] Test software shall issue a service request over an SSL session and shall verify that the response HTTP header contains the following fields and information." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#HomePageURLEndpoint}/DataCustodian</con:endpoint>
					<con:request/>
					<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
						<con:configuration>
							<scriptText>
String strCookie = messageExchange.responseHeaders["Set-Cookie"]
//log.info(strCookie);

assert(strCookie.contains("Secure;"));
assert(strCookie.contains("JSESSIONID="));

assert true;</scriptText>
						</con:configuration>
					</con:assertion>
					<con:credentials>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters/>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC003] Verify that the Data Custodian implements TLS 1.2">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());
	

	def cmdSubString = "s_client -tls1_2 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	//proc.in.eachLine {
	//	line -> log.info(line);
	//};

	log.info(strResult);

	if(strResult.contains("Protocol  : TLSv1.2")){
		log.info("TLS 1.2 implemented");
	} else {
		testRunner.fail( "TLS 1.2 not implemented" );
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC004] Verify that when communicating with a Retail Customer or Third Party the Data Custodian negotiates the highest level of TLS mutually supported.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());


	// first see if tls 1.2 is negotiated
	def cmdSubString = "s_client -tls1 -tls1_1 -tls1_2 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.2")){
		log.info("TLS 1.2 negotiated");
	} else {
		testRunner.fail( "TLS 1.2 not negotiated" );
	}

	// next see if tls 1.1 is negotiated
	cmdSubString = "s_client -tls1 -tls1_1 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.1")){
		log.info("TLS 1.1 negotiated");
	} else {
		testRunner.fail( "TLS 1.1 not negotiated" );
	}

	// next see if tls 1.0 is negotiated
	cmdSubString = "s_client -tls1 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";

	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Protocol  : TLSv1\n")){
		log.info("TLS 1 negotiated");
	} else {
		testRunner.fail( "TLS 1 not negotiated" );
	}


	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC005] Verify that when communicating with a Retail Customer the Data Custodian rejects TLS_RSA_WITH_NULL_SHA cipher suites.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} -cipher NULL-SHA"
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/${config.cmdTimeout} ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";
	}
	
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
	
	if(strResult.contains("Cipher is NULL-SHA") ||
		strResult.contains("SSL-Session:") ||
		strResult.contains("Protocol  :") ||
		!strResult.contains("Cipher is (NONE)")) {

		testRunner.fail( "NULL-SHA accepted" );
		
	} else {
		log.info("NULL-SHA rejected");
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC006] Verify that when communicating with a Retail Customer at a minimum the Data Custodian accepts the TLS_RSA_WITH_AES_128_CBC_SHA cipher suite.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} -cipher AES128-SHA";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;

	if(strResult.contains("Cipher    : AES128-SHA")){
		log.info("AES128-SHA accepted");
	} else {
		testRunner.fail( "AES128-SHA not accepted" );
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC008] Verify that the Data Custodian maintains an unexpired unrevoked RSA certificate with a public key length of at least 2048 bits.">
				<con:settings/>
				<con:config>
					<script>import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Server public key is 2048 bit")){
		log.info("Server public key is 2048 bit");
	} else {
		testRunner.fail( "Server public key is not 2048 bit" );
		return;
	}

	// check if certificate is expired
	// get certificate
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${groovyUtils.projectPath}\\etc\\getcert.bat ${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${groovyUtils.projectPath}/etc/getcert.pem";

		}
	} else {
		// linux or OS X
		//command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
		command = "${groovyUtils.projectPath}/etc/getcert.sh ${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} ${groovyUtils.projectPath}/etc/getcert.pem";
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;


	cmdSubString = "x509 -noout -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	
	strNotBefore = strResult.substring(strResult.indexOf("notBefore=") + "notBefore=".length(),strResult.indexOf(" GMT",strResult.indexOf("notBefore=")));
	strNotAfter = strResult.substring(strResult.indexOf("notAfter=") + "notAfter=".length(),strResult.indexOf(" GMT",strResult.indexOf("notAfter=")));

	Calendar cal = Calendar.getInstance();
	
	DateFormat df = new SimpleDateFormat ("MMM dd HH:mm:ss yyyy z");
	Date dNB = df.parse(strNotBefore + " GMT");
	Date dNA = df.parse(strNotAfter + " GMT");
	
	Date now = new Date();
	String datetimeStr = now.toString();
	
	if(now.after(dNB) &amp;&amp; now.before(dNA)) {
		log.info("Certificate has not expired");
	} else {
		testRunner.fail("Certificate has expired");

		try{
		 
			File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
			file.delete();
		
		} catch(Exception e) {
		
			log.error("Error deleing temp file:" + e.getMessage());
		}	
			
		return;
	}

	// check if RSA
	cmdSubString = "x509 -text -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Public Key Algorithm: rsaEncryption")){
		log.info("Public Key Algorithm: rsaEncryption");
	} else {
		testRunner.fail("Certificate does not use rsaEncryption");
	}
	

	try{
	 
		File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
		file.delete();
	
	} catch(Exception e) {
	
		log.error("Error deleing temp file:" + e.getMessage());
	}	

	

	return;

	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC013] Verify that the Third Party implements TLS 1.1 or higher.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -tls1_1 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.1")){
		log.info("TLS 1.1 implemented");
		return;
	}

	cmdSubString = "s_client -tls1_2 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.2")){
		log.info("TLS 1.2 implemented");
	} else {
		testRunner.fail( "TLS 1.1 or TLS 1.2 not implemented" );
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC014] Verify that when communicating with a Data Custodian or Retail Customer the Third Party negotiates the highest level of TLS mutually supported">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());


	// next see if tls 1.1 is negotiated
	def cmdSubString = "s_client -tls1 -tls1_1 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.1")){
		log.info("TLS 1.1 negotiated");
	} else {
		testRunner.fail( "TLS 1.1 not negotiated" );
	}

	// next see if tls 1.0 is negotiated
	cmdSubString = "s_client -tls1 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Protocol  : TLSv1\n")){
		log.info("TLS 1 negotiated");
	} else {
		testRunner.fail( "TLS 1 not negotiated" );
	}


	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC016] Verify that the Third Party maintains an unexpired unrevoked RSA certificate with a public key length of at least 2048 bits">
				<con:settings/>
				<con:config>
					<script>import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Server public key is 2048 bit")){
		log.info("Server public key is 2048 bit");
	} else {
		testRunner.fail( "Server public key is not 2048 bit" );
		return;
	}

	// check if certificate is expired
	// get certificate
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${groovyUtils.projectPath}\\etc\\getcert.bat ${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl s_client -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${groovyUtils.projectPath}/etc/getcert.pem";

		}
	} else {
		// linux or OS X
		//command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
		command = "${groovyUtils.projectPath}/etc/getcert.sh ${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort} ${groovyUtils.projectPath}/etc/getcert.pem";
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;


	cmdSubString = "x509 -noout -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	
	strNotBefore = strResult.substring(strResult.indexOf("notBefore=") + "notBefore=".length(),strResult.indexOf(" GMT",strResult.indexOf("notBefore=")));
	strNotAfter = strResult.substring(strResult.indexOf("notAfter=") + "notAfter=".length(),strResult.indexOf(" GMT",strResult.indexOf("notAfter=")));

	Calendar cal = Calendar.getInstance();
	
	DateFormat df = new SimpleDateFormat ("MMM dd HH:mm:ss yyyy z");
	Date dNB = df.parse(strNotBefore + " GMT");
	Date dNA = df.parse(strNotAfter + " GMT");
	
	Date now = new Date();
	String datetimeStr = now.toString();
	
	if(now.after(dNB) &amp;&amp; now.before(dNA)) {
		log.info("Certificate has not expired");
	} else {
		testRunner.fail("Certificate has expired");

		try{
		 
			File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
			file.delete();
		
		} catch(Exception e) {
		
			log.error("Error deleing temp file:" + e.getMessage());
		}	
			
		return;
	}

	// check if RSA
	cmdSubString = "x509 -text -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Public Key Algorithm: rsaEncryption")){
		log.info("Public Key Algorithm: rsaEncryption");
	} else {
		testRunner.fail("Certificate does not use rsaEncryption");
	}
	

	try{
	 
		File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
		file.delete();
	
	} catch(Exception e) {
	
		log.error("Error deleing temp file:" + e.getMessage());
	}	

	

	return;

	
	</script>
				</con:config>
			</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_14] Authorization and Authentication" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer views Data Custodian list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I navigate to Data Custodian list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Data Custodians");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("data_custodian");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{

	//*********************************************************
	log.info("Scenario: Retail Customer selects Data Custodian for the list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
        
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Scope">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer selects Scope");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Third Party");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	driver.findElement(By.name("Data_custodian")).click();
	driver.findElement(By.name("next")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.findElement(By.name("authorize")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_19] Partial Update Data" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_37] Query Parameters" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_39] PUSH Model" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite>	
	<con:testSuite name="RonsSandbox">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>import org.greenbutton.cmd.utils.App;

def obj = new App();

obj.Test("hi");</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/>
	</con:testSuite>
	<con:testSuite name="MartySandbox">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Resources" searchProperties="true">
			<con:settings/>
			<con:testStep type="groovy" name="Client Credentials">
				<con:settings/>
				<con:config>
					<script>def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def mysqlCmd=project.getPropertyValue("mysqlCmd")
def DBprepopulateScriptName = project.getPropertyValue("DBprepopulateScriptName")

public boolean RunCommand(String path,String cmd)
{
	def doCmd;

	if (System.properties['os.name'].toLowerCase().contains('windows')) {
		doCmd = ["cmd", "/c",cmd].execute(null, new File(path));
	} else {
		doCmd = ["bash", "-c",cmd].execute(null, new File(path));
	}

log.info "Cmd: " + cmd;

		
	doCmd.waitFor()

	if(doCmd.exitValue()!=0)
	{
		log.error "return code: ${ doCmd.exitValue()}"
		log.error "stderr: ${doCmd.err.text}"
		log.error "stdout: ${doCmd.in.text}"
	}
}

def etcpath = projectPath + "/etc";
RunCommand(etcpath,mysqlCmd + / --user=root --password=password --execute="SOURCE test.sql" datacustodian/);
//RunCommand(etcpath,mysqlCmd + / --user=root --password=password --execute="TRUNCATE TABLE subscriptions;" datacustodian/);
//RunCommand(etcpath,mysqlCmd + / --user=root --password=password --execute="TRUNCATE TABLE application_information_scopes;" datacustodian/);
//RunCommand(etcpath,mysqlCmd + / --user=root --password=password --execute="DELETE FROM application_information WHERE id=2;" datacustodian/);
return;

RunCommand(etcpath,mysqlCmd + " --user=root --password=password &lt; cleantables_dc.sql");
RunCommand(etcpath,mysqlCmd + " --user=root --password=password &lt; cleantables_tp.sql");
RunCommand(etcpath,mysqlCmd + " --user=root --password=password &lt; prepopulatesql_dc.sql");
RunCommand(etcpath,mysqlCmd + " --user=root --password=password &lt; prepopulatesql_tp.sql");






assert true;</script>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:properties>
			<con:property>
				<con:name>sessionid</con:name>
				<con:value>null</con:value>
			</con:property>
		</con:properties>
	</con:testSuite>
<con:testSuite name="Dons Sandbox">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestTwoTokens" searchProperties="true" id="52471459-d197-4027-aabe-61f91f6c298b">
			<con:settings/>
			<con:testStep type="groovy" name="StartDriver">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.greenbutton.cmd.utils.DriverHelper;

/////////////////////////////////////////////////////////
// get variables from the project Custom Properties
/////////////////////////////////////////////////////////
def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")


/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
driver._bLogActions = true;

if( context["driver"] == null )
context["driver"] = driver

return
//Then in later steps you can retrieve it as context["driverInstance"] 
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="Set Access Tokens">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import com.eviware.soapui.support.types.StringToStringMap;


/////////////////////////////////////////////////////////
// fetch driver from context
/////////////////////////////////////////////////////////
Object driver = context["driver"];

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def BaseURL = project.getPropertyValue("BaseURL");
def ServiceEndpoint=BaseURL+"/ThirdParty/home";
List&lt;WebElement> rows;
def teststep;

log.info("Service Endpoint: " + ServiceEndpoint);

try {
	/////////////////////////////////////////////////////////
	// run test step details
	/////////////////////////////////////////////////////////
	// open Data Custodian
	driver.get(ServiceEndpoint)

	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("alan");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Authorizations")).click();
	rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken1 = rows.get(rows.size() - 1).getText();
	log.info("accessToken1:" +  accessToken1);
	project.setPropertyValue("userAccessToken1",accessToken1);
	driver.findElement(By.id("logout")).click();

	// set message parameters
	teststep = testRunner.testCase.getTestStepByName("GET Subscription 1");
	teststep.setPropertyValue("Authorization","Bearer "+ accessToken1);
	teststep.setPropertyValue("subscriptionId","1");

	
	driver.findElement(By.id("login")).click();
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys("charles");
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys("koala");
	driver.findElement(By.name("submit")).click();
	driver.findElement(By.linkText("Authorizations")).click();
	rows = driver.FindElementsByXpath("//td[@class='access_token']");
	String accessToken2 = rows.get(rows.size() - 1).getText();
	log.info("accessToken2:" +  accessToken2);
	project.setPropertyValue("userAccessToken2",accessToken2);
	driver.findElement(By.id("logout")).click();

	// set message parameters
	teststep = testRunner.testCase.getTestStepByName("GET Subscription 2");
	teststep.setPropertyValue("Authorization","Bearer "+ accessToken2);
	teststep.setPropertyValue("subscriptionId","2");


	} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
	driver.quit();
}
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="groovy" name="StopDriver">
				<con:settings/>
				<con:config>
					<script>/////////////////////////////////////////////////////////
// Note: Generated by capture using Selenium in FF. 
// Export to Java / JUnit 4 / WebDriver
// Copy and paste into Groovy Script with minor tweaks
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import org.openqa.selenium.By
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;



/////////////////////////////////////////////////////////
// Create a new instance of the Firefox driver
/////////////////////////////////////////////////////////
Object driver = context["driver"]

//Close the browser
driver.quit();

//Then in later steps you can retrieve it as context["driverInstance"] 
</script>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Subscription 1">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Subscription 1" mediaType="application/json">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
							<con:configuration>
								<scriptText>assert messageExchange.responseStatusCode == 200</scriptText>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="subscriptionID" value="1"/>
							<con:entry key="Authorization" value="Bearer bdd9b97b-b1cf-4b35-9c15-a14356930415"/>
							<con:entry key="subscriptionId" value="1"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Subscription 2">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Subscription 2" mediaType="application/json">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
							<con:configuration>
								<scriptText>assert messageExchange.responseStatusCode == 200	</scriptText>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer 14e9da63-b611-43a3-8010-b4830d789de4"/>
							<con:entry key="subscriptionID" value="2"/>
							<con:entry key="subscriptionId" value="2"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:testStep type="restrequest" name="GET Subscription 1 Wrong Access Token">
				<con:settings/>
				<con:config service="ESPI Resources" resourcePath="/${#Project#resourceUri}/Batch/Subscription/{subscriptionID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:restRequest name="GET Subscription 1 Wrong Access Token" mediaType="application/json">
						<con:endpoint>${#Project#ServiceEndpoint}</con:endpoint>
						<con:request/>
						<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
							<con:configuration>
								<scriptText>assert messageExchange.responseStatusCode != 200</scriptText>
							</con:configuration>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:parameters>
							<con:entry key="Authorization" value="Bearer ${#Project#useraccesstoken2}"/>
							<con:entry key="subscriptionID" value="1"/>
							<con:entry key="subscriptionId" value="1"/>
						</con:parameters>
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:credentials>
							<con:authType>Global HTTP Settings</con:authType>
						</con:credentials>
						<con:parameterOrder>
							<con:entry>subscriptionID</con:entry>
							<con:entry>Authorization</con:entry>
							<con:entry>Content-Type</con:entry>
						</con:parameterOrder>
					</con:restRequest>
				</con:config>
			</con:testStep>
			<con:properties/>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Data Custodian Admin API" searchProperties="true" id="ef1c812e-29c0-4ed1-9b66-e487d8d1e0de"><con:settings/><con:testStep type="groovy" name="Feature: Data Custodian Admin API"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Dons Sandbox Feature: Data Custodian Admin API");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET MeterReading Feed by Path"><con:settings/><con:config service="ESPI Resources" methodName="Get root MeterReading feed" resourcePath="/${#Project#resourceUri}/MeterReading" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET MeterReading Feed by Path" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/><con:entry key="Content-Type" value="Application/atom+xml"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET /ApplicationInformation"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation Feed" resourcePath="/${#Project#resourceUri}/ApplicationInformation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /ApplicationInformation" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/><con:entry key="Content-Type" value="Application/atom+xml"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get /ApplicationInformation/{applicationInformationId} ID 1"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get /ApplicationInformation/{applicationInformationId} ID 1" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/><con:entry key="Content-Type" value="Application/atom+xml"/><con:entry key="applicationInformationId" value="${#Project#applicationInformationId}"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 2"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 2" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
  <con:entry key="applicationInformationId" value="2"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 3"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 3" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
  <con:entry key="applicationInformationId" value="3"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 99"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 99" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}"/>
  <con:entry key="applicationInformationId" value="99"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST /MeterReading"><con:settings/><con:config service="ESPI Resources" methodName="Post" resourcePath="/${#Project#resourceUri}/MeterReading" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST /MeterReading" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>400,401,403,415</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:attachment><con:name>entry_MeterReading_2.xml</con:name><con:contentType>application/atom+xml</con:contentType><con:size>944</con:size><con:contentId>entry_MeterReading_2.xml</con:contentId><con:data>UEsDBBQACAgIAGdlK0UAAAAAAAAAAAAAAAAYAAAAZW50cnlfTWV0ZXJSZWFkaW5nXzIueG1sxVNNi9swEL3nVwjdHUn52CQm8eKkMfSwUNrspZei2JNErCIZabRp/n3lj7p0WXoqLAjBDO/Ne2+Q1o8/r5q8gvPKmg0VY04JmNJWypw39PlQJEv6mI3Wxk9TMOjuJOKNT8HXakMviHXKmJHgj2Przqxp0x4SKQPidruNb9MWMuF8znK0V5qNCCHtZFVlwZk0BFWlxWJRbIvpLMn5ap/M9ttdsnrgD0lRiHy+ysVil+/XrGcNE7QyL+Ti4DRIaltKfbEe0yVfcvZJotwFjzGZNK1PJn4I5sDb4Epg38LRl07VGPfA5uzZyzN8scogE+wJENxXkM1SmKDEgd5QD/pE2Qc46PVD/SHqsfxsYvkq9TZKvPRu4iURqv9qqVc83GsYtv6ODirUkBXqhACGPCkTEMheQ4lOlQrvZGeND9c2WfdwOsYwoLQxkMG20fQaJ+lfmTssewtu2XU4auUvUGUTLiaJ4MlkduA8bc/3jvQHM9BCXTVB/kH6jRh1Zfv7sl9QSwcI5hDMyn8BAACwAwAAUEsBAhQAFAAICAgAZ2UrReYQzMp/AQAAsAMAABgAAAAAAAAAAAAAAAAAAAAAAGVudHJ5X01ldGVyUmVhZGluZ18yLnhtbFBLBQYAAAAAAQABAEYAAADFAQAAAAA=</con:data><con:id>9bd633ee-3d88-4ddf-8ec3-51dd36736ba2</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT /MeterReading/{meterReadingId} w/o Data"><con:settings/><con:config service="ESPI Resources" methodName="Put" resourcePath="/${#Project#resourceUri}/MeterReading/{meterReadingId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT /MeterReading/{meterReadingId} w/o Data" mediaType="application/atom+xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200,401,403,415</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#Project#data_custodian_access_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Third Party Registration Admin API" searchProperties="true" id="b7ace92d-5fed-4b5d-be75-28f4104ab172"><con:settings/><con:testStep type="groovy" name="Feature: Third Party Registration Admin"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Dons Sandbox Feature: Third Party Registration Admin API");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET MeterReading Feed by Path"><con:settings/><con:config service="ESPI Resources" methodName="Get root MeterReading feed" resourcePath="/${#Project#resourceUri}/MeterReading" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET MeterReading Feed by Path" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/MeterReading</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation Feed" resourcePath="/${#Project#resourceUri}/ApplicationInformation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="applicationInformationId" value="${#Project#applicationInformationId}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET /ApplicationInformation/{applicationInformationId} ID 2"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /ApplicationInformation/{applicationInformationId} ID 2" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>401,403</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="applicationInformationId" value="2"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
  <con:entry key="applicationInformationId" value="3"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#registration_third_party_access_token}"/>
  <con:entry key="applicationInformationId" value="99"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Admin API" searchProperties="true" id="e8a06467-be55-46f2-9dd7-2d141fb18389"><con:settings/><con:testStep type="groovy" name="Feature: Upload Admin API"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Dons Sandbox Feature: Upload Admin API");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation Feed" resourcePath="/${#Project#resourceUri}/ApplicationInformation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 1" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/1</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
  <con:entry key="applicationInformationId" value="${#Project#applicationInformationId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 2"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 2" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
  <con:entry key="applicationInformationId" value="2"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG] GET /ApplicationInformation/{applicationInformationId} ID 3" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
  <con:entry key="applicationInformationId" value="3"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99"><con:settings/><con:config service="ESPI Resources" methodName="GET ApplicationInformation by Id" resourcePath="/${#Project#resourceUri}/ApplicationInformation/{applicationInformationId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="[NEG} GET /ApplicationInformation/{applicationInformationId} ID 99" mediaType="Application/atom+xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ServiceEndpoint}</con:endpoint><con:request/><con:originalUri>https://services.greenbuttondata.org/DataCustodian/espi/1_1/resource/ApplicationInformation/2</con:originalUri><con:assertion type="Invalid HTTP Status Codes" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${#Project#upload_access_token}"/>
  <con:entry key="Content-Type" value="Application/atom+xml"/>
  <con:entry key="applicationInformationId" value="99"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_xx] OAuth 2.0 [RFC6749] Compliance" searchProperties="true" id="7b5dd0a1-dcb7-40b5-8336-7b5071fbbdbb"><con:settings/><con:testStep type="groovy" name="[NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter)"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import groovyx.net.http.Method
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseDecorator
import groovyx.net.http.HttpResponseException

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath


def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

def clientId = project.getPropertyValue("client_id")
def redirectUri = project.getPropertyValue("redirect_uri")
def scope = project.getPropertyValue("scope")
def state = project.getPropertyValue("state")

public class RestConnector {
	private String baseUrl
	private HTTPBuilder httpBuilder
	private List&lt;String> cookies

	RestConnector(String url) {
		this.baseUrl = url
		this.httpBuilder = initializeHttpBuilder()
		this.cookies = []
	}

	public def request(Method method, ContentType contentType, String url, Map&lt;String, Serializable> params) {
		debug("Send $method request to ${this.baseUrl}$url: $params")
		httpBuilder.request(method, contentType) { request ->
			uri.path = url
			uri.query = params
			headers['Cookie'] = cookies.join(';')
		}
	}

	private HTTPBuilder initializeHttpBuilder() {
		def httpBuilder = new HTTPBuilder(baseUrl)

		httpBuilder.handler.success = { HttpResponseDecorator resp, reader ->
			resp.getHeaders('Set-Cookie').each {
				String cookie = it.value.split(';')[0]
				debug("Adding cookie to collection: $cookie")
				cookies.add(cookie)
			}
			debug("Response: ${reader}")
			return reader
		}
		return httpBuilder
	}

	private debug(String message) {
		System.out.println(message) //for Gradle
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////


log.info("*****************************************************************************************************");
log.info("   RESET Data Custodian Database ");
log.info("*****************************************************************************************************");	
	
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);


log.info("*****************************************************************************************************");
log.info("   Login Retail Customer -- Alan ");
log.info("*****************************************************************************************************");	

restConnector = new RestConnector(ServiceEndpoint)

Map params = [j_username: TestRetailCustomer, j_password: TestRetailCustomerPW]

restConnector.request(Method.POST, ContentType.URLENC, '/DataCustodian/j_spring_security_check', params)
assert !(restConnector.cookies.empty)


log.info("*****************************************************************************************************");
log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
log.info("*****************************************************************************************************");	

params = [client_id: clientId, redirect_uri: redirectUri, scope: scope, state: state]

restConnector.request(Method.GET, ContentType.HTML, '/DataCustodian/oauth/authorize', params)
		
return;

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LoginRetailCustomerAlan" searchProperties="true"><con:settings/><con:testStep type="groovy" name="LoginRetailCustomerAlan"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////
import groovyx.net.http.Method
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseDecorator
import groovyx.net.http.HttpResponseException

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath


def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")


public class RestConnector {
	private String baseUrl
	private HTTPBuilder httpBuilder
	private List&lt;String> cookies

	RestConnector(String url) {
		this.baseUrl = url
		this.httpBuilder = initializeHttpBuilder()
		this.cookies = []
	}

	public def request(Method method, ContentType contentType, String url, Map&lt;String, Serializable> params) {
		debug("Send $method request to ${this.baseUrl}$url: $params")
		httpBuilder.request(method, contentType) { request ->
			uri.path = url
			uri.query = params
			headers['Cookie'] = cookies.join(';')
		}
	}

	private HTTPBuilder initializeHttpBuilder() {
		def httpBuilder = new HTTPBuilder(baseUrl)

		httpBuilder.handler.success = { HttpResponseDecorator resp, reader ->
			resp.getHeaders('Set-Cookie').each {
				String cookie = it.value.split(';')[0]
				debug("Adding cookie to collection: $cookie")
				cookies.add(cookie)
			}
			debug("Response: ${reader}")
			return reader
		}
		return httpBuilder
	}

	private debug(String message) {
		System.out.println(message) //for Gradle
	}
}

///////////////////////////////
// 
//	Main Body
//
///////////////////////////////

restConnector = new RestConnector(ServiceEndpoint)

Map params = [j_username: TestRetailCustomer, j_password: TestRetailCustomerPW]

restConnector.request(Method.POST, ContentType.URLENC, '/DataCustodian/j_spring_security_check', params)
assert !(restConnector.cookies.empty)
		
return;

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Groovy Test Script [NEG] OAuth Authorize Endpoint -- malformed" searchProperties="true" id="5fef2c1f-372a-41c6-9ad6-bdb8138b15be"><con:settings/><con:testStep type="groovy" name="[NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter)"><con:settings/><con:config><script><![CDATA[/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////

import groovyx.net.http.Method
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.HttpResponseDecorator
import groovy.util.logging.Log

import org.apache.http.client.RedirectStrategy

/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

def clientId = project.getPropertyValue("client_id")
def redirectUri = project.getPropertyValue("redirect_uri")
def scope = project.getPropertyValue("scope")
def state = project.getPropertyValue("state")

def List<String> sessionCookie = []

public class RestConnector {
	private log
	private String baseUrl
	private HTTPBuilder httpBuilder
	private List<String> cookies

	RestConnector(String url, log) {
		this.baseUrl = url
		this.httpBuilder = initializeHttpBuilder()
		this.cookies = []
		this.log = log
	}

	public def request(Method method, ContentType contentType, String url, Map<String, Serializable> params) {
		
		debug("Send $method request to ${this.baseUrl}$url: $params")
		httpBuilder.request(method, contentType) { request ->
			uri.path = baseUrl + url
			uri.query = params
			headers['Cookie'] = cookies.join(';')
		}
	}

	private HTTPBuilder initializeHttpBuilder() {
		def httpBuilder = new HTTPBuilder(baseUrl)

		httpBuilder.handler.success = { HttpResponseDecorator resp, reader ->
			resp.getHeaders('Set-Cookie').each {
				String cookie = it.value.split(';')[0]
				debug("Adding cookie to collection: $cookie")
				cookies.add(cookie)
			}
			debug("Response: ${reader}")
			return reader
		}
		return httpBuilder
	}

	private debug(String message) {
  		log.info(message);  		
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//	httpBuilder class used to test Oauth Authorize Endpoint so that 302 failures can be captured
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class OauthConnector { 
	private log
	private String baseUrl
	private HTTPBuilder httpBuilder
	private List<String> cookies

	OauthConnector(String url, List<String> cookies, log) {
		this.baseUrl = url
		this.httpBuilder = initializeOauthHttpBuilder()
		this.cookies = cookies
		this.log = log
	}

	public def request(Method method, ContentType contentType, String url, Map<String, Serializable> params) {
				
		debug("Send $method request to ${this.baseUrl}$url: $params")

		String strResult = "";

		// Make sure the HttpClient doesn't perform a redirect
		def dontHandleRedirectStrategy = [
			getRedirect : { request, response, context -> null},
			isRedirected : { request, response, context -> false}
		]

		httpBuilder.client.setRedirectStrategy(dontHandleRedirectStrategy as RedirectStrategy)
		
		// Execute a GET request and expect a redirect
		httpBuilder.request(method, contentType) { req ->
			uri.path = baseUrl + url
			uri.query = params
			headers['Cookie'] = cookies.join(';')

			response.success = { response, reader ->

				strResult = "OauthConnector Succeeded: " + response.statusLine.statusCode + " \n" + response.headers['Location'].value;
				debug(strResult);
			
				assertThat response.statusLine.statusCode, is (302)
				assertThat response.headers['Location'].value, startsWith("${baseUrl}")
			}

			response.failure = { response, reader ->
				fail("Expected redirect but received ${response.statusLine} \n ${reader}")
				strResult = "OauthConnector Failed: " + response.statusLine;
				debug(strResult)	
			}	
		}
	}

	private HTTPBuilder initializeOauthHttpBuilder() {
		def httpBuilder = new HTTPBuilder(baseUrl)

		return httpBuilder
	}
	
	private debug(String message) {
  		log.info(message);
	}
}
///////////////////////////////
// 
//	Main Body
//
///////////////////////////////


log.info("*****************************************************************************************************");
log.info("   RESET Data Custodian Database ");
log.info("*****************************************************************************************************");	
	
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);


log.info("*****************************************************************************************************");
log.info("   Login Retail Customer -- Alan ");
log.info("*****************************************************************************************************");	

restConnector = new RestConnector(ServiceEndpoint, log)

url = '/j_spring_security_check'
Map params = [j_username: TestRetailCustomer, j_password: TestRetailCustomerPW]
log.info("URL = " + "POST " + restConnector.baseUrl + url + params);

restConnector.request(Method.POST, ContentType.URLENC, url, params)
assert !(restConnector.cookies.empty)

sessionCookie = restConnector.cookies;

log.info("Returned session cookie = " + restConnector.cookies);


log.info("*****************************************************************************************************");
log.info("   [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter");
log.info("*****************************************************************************************************");	

oauthConnector = new OauthConnector(ServiceEndpoint, sessionCookie, log)

log.info("oauthConnector = " + oauthConnector);
log.info("oauthConnector baseUrl = " + oauthConnector.baseUrl);
log.info("oauthConnector httpBuilder = " + oauthConnector.httpBuilder);
log.info("oauthConnector cookies = " + oauthConnector.cookies);

url = '/oauth/authorize'
params = [client_id: clientId, redirect_uri: redirectUri, scope: scope, state: state]
log.info("URL = " + "GET " + oauthConnector.baseUrl + url + params);
log.info("Cookies = " + oauthConnector.cookies);

oauthConnector.request(Method.GET, ContentType.HTML, url, params)
	
return;

]]></script></con:config></con:testStep><con:testStep type="groovy" name="DEMO [NEG] OAuth Authorize Endpoint -- Reject malformed request (no response_type parameter)"><con:settings/><con:config><script>/////////////////////////////////////////////////////////
// Need these imports to run tests
/////////////////////////////////////////////////////////

import org.greenbutton.cmd.utils.RestConnector;



/////////////////////////////////////////////////////////
// define some variables
/////////////////////////////////////////////////////////

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath

def ServiceEndpoint=project.getPropertyValue("ServiceEndpoint")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")

def clientId = project.getPropertyValue("client_id")
def redirectUri = project.getPropertyValue("redirect_uri")
def scope = project.getPropertyValue("scope")
def state = project.getPropertyValue("state")

def List&amp;lt;String> sessionCookie = []




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//	httpBuilder class used to test Oauth Authorize Endpoint so that 302 failures can be captured
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////
// 
//	Main Body
//
///////////////////////////////


log.info("*****************************************************************************************************");
log.info("   RESET Data Custodian Database ");
log.info("*****************************************************************************************************");	
	
testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDBDC']);


log.info("*****************************************************************************************************");
log.info("   Login Retail Customer -- Alan ");
log.info("*****************************************************************************************************");	

RestConnector restConnector = new RestConnector("http://www.apache.org/", log);
boolean bResult = restConnector.request("dummy", "dummy", "", null);

assert (bResult)




	
return;</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/>
	</con:testSuite>

<con:testSuite name="[FB_3] Core Green Button Connect My Data"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_3] Core Green Button Connect My Data" searchProperties="true" id="72095d31-0ede-4d94-8b88-dfe552917235"><con:settings/><con:testStep type="calltestcase" name="Run TestCase EstablishTwoSubscriptions">
				<con:settings/>
				<con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:targetTestCase>842a41c8-96fb-4b15-bab5-c26d1f3f0dba</con:targetTestCase>
					<con:properties/>
					<con:returnProperties/>
					<con:runMode>PARALLELL</con:runMode>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Feature: TP Registration Token Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: TP Registration Token Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Feature: TP Admin Token Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: TP Admin Token Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:testStep type="groovy" name="Feature: TP User Token Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: TP User Token Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_13] Security and Privacy"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_13] Security and Privacy" searchProperties="true"><con:settings/><con:testStep type="httprequest" name="[TR_TC001] Test software shall issue a service request over an SSL session and shall verify that the response HTTP header contains the following fields and information.">
				<con:settings/>
				<con:config method="GET" xsi:type="con:HttpRequest" name="[TR_TC001] Test software shall issue a service request over an SSL session and shall verify that the response HTTP header contains the following fields and information." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:settings>
						<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
					</con:settings>
					<con:endpoint>${#Project#HomePageURLEndpoint}/DataCustodian</con:endpoint>
					<con:request/>
					<con:assertion type="GroovyScriptAssertion" name="Script Assertion">
						<con:configuration>
							<scriptText>
String strCookie = messageExchange.responseHeaders["Set-Cookie"]
//log.info(strCookie);

assert(strCookie.contains("Secure;"));
assert(strCookie.contains("JSESSIONID="));

assert true;</scriptText>
						</con:configuration>
					</con:assertion>
					<con:credentials>
						<con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType>
					</con:credentials>
					<con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
					<con:jmsPropertyConfig/>
					<con:parameters/>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC003] Verify that the Data Custodian implements TLS 1.2">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());
	

	def cmdSubString = "s_client -tls1_2 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	//proc.in.eachLine {
	//	line -> log.info(line);
	//};

	log.info(strResult);

	if(strResult.contains("Protocol  : TLSv1.2")){
		log.info("TLS 1.2 implemented");
	} else {
		testRunner.fail( "TLS 1.2 not implemented" );
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC004] Verify that when communicating with a Retail Customer or Third Party the Data Custodian negotiates the highest level of TLS mutually supported.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());


	// first see if tls 1.2 is negotiated
	def cmdSubString = "s_client -tls1 -tls1_1 -tls1_2 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.2")){
		log.info("TLS 1.2 negotiated");
	} else {
		testRunner.fail( "TLS 1.2 not negotiated" );
	}

	// next see if tls 1.1 is negotiated
	cmdSubString = "s_client -tls1 -tls1_1 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.1")){
		log.info("TLS 1.1 negotiated");
	} else {
		testRunner.fail( "TLS 1.1 not negotiated" );
	}

	// next see if tls 1.0 is negotiated
	cmdSubString = "s_client -tls1 -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";

	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Protocol  : TLSv1\n")){
		log.info("TLS 1 negotiated");
	} else {
		testRunner.fail( "TLS 1 not negotiated" );
	}


	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC005] Verify that when communicating with a Retail Customer the Data Custodian rejects TLS_RSA_WITH_NULL_SHA cipher suites.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} -cipher NULL-SHA"
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/${config.cmdTimeout} ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";
	}
	
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
	
	if(strResult.contains("Cipher is NULL-SHA") ||
		strResult.contains("SSL-Session:") ||
		strResult.contains("Protocol  :") ||
		!strResult.contains("Cipher is (NONE)")) {

		testRunner.fail( "NULL-SHA accepted" );
		
	} else {
		log.info("NULL-SHA rejected");
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC006] Verify that when communicating with a Retail Customer at a minimum the Data Custodian accepts the TLS_RSA_WITH_AES_128_CBC_SHA cipher suite.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} -cipher AES128-SHA";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;

	if(strResult.contains("Cipher    : AES128-SHA")){
		log.info("AES128-SHA accepted");
	} else {
		testRunner.fail( "AES128-SHA not accepted" );
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC008] Verify that the Data Custodian maintains an unexpired unrevoked RSA certificate with a public key length of at least 2048 bits.">
				<con:settings/>
				<con:config>
					<script>import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Server public key is 2048 bit")){
		log.info("Server public key is 2048 bit");
	} else {
		testRunner.fail( "Server public key is not 2048 bit" );
		return;
	}

	// check if certificate is expired
	// get certificate
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${groovyUtils.projectPath}\\etc\\getcert.bat ${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl s_client -connect ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${groovyUtils.projectPath}/etc/getcert.pem";

		}
	} else {
		// linux or OS X
		//command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
		command = "${groovyUtils.projectPath}/etc/getcert.sh ${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${config.DataCustodianHostName}:${config.DataCustodianSSLPort} ${groovyUtils.projectPath}/etc/getcert.pem";
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;


	cmdSubString = "x509 -noout -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	
	strNotBefore = strResult.substring(strResult.indexOf("notBefore=") + "notBefore=".length(),strResult.indexOf(" GMT",strResult.indexOf("notBefore=")));
	strNotAfter = strResult.substring(strResult.indexOf("notAfter=") + "notAfter=".length(),strResult.indexOf(" GMT",strResult.indexOf("notAfter=")));

	Calendar cal = Calendar.getInstance();
	
	DateFormat df = new SimpleDateFormat ("MMM dd HH:mm:ss yyyy z");
	Date dNB = df.parse(strNotBefore + " GMT");
	Date dNA = df.parse(strNotAfter + " GMT");
	
	Date now = new Date();
	String datetimeStr = now.toString();
	
	if(now.after(dNB) &amp;&amp; now.before(dNA)) {
		log.info("Certificate has not expired");
	} else {
		testRunner.fail("Certificate has expired");

		try{
		 
			File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
			file.delete();
		
		} catch(Exception e) {
		
			log.error("Error deleing temp file:" + e.getMessage());
		}	
			
		return;
	}

	// check if RSA
	cmdSubString = "x509 -text -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Public Key Algorithm: rsaEncryption")){
		log.info("Public Key Algorithm: rsaEncryption");
	} else {
		testRunner.fail("Certificate does not use rsaEncryption");
	}
	

	try{
	 
		File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
		file.delete();
	
	} catch(Exception e) {
	
		log.error("Error deleing temp file:" + e.getMessage());
	}	

	

	return;

	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC013] Verify that the Third Party implements TLS 1.1 or higher.">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -tls1_1 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.1")){
		log.info("TLS 1.1 implemented");
		return;
	}

	cmdSubString = "s_client -tls1_2 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.2")){
		log.info("TLS 1.2 implemented");
	} else {
		testRunner.fail( "TLS 1.1 or TLS 1.2 not implemented" );
	}

	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC014] Verify that when communicating with a Data Custodian or Retail Customer the Third Party negotiates the highest level of TLS mutually supported">
				<con:settings/>
				<con:config>
					<script>
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());


	// next see if tls 1.1 is negotiated
	def cmdSubString = "s_client -tls1 -tls1_1 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Protocol  : TLSv1.1")){
		log.info("TLS 1.1 negotiated");
	} else {
		testRunner.fail( "TLS 1.1 not negotiated" );
	}

	// next see if tls 1.0 is negotiated
	cmdSubString = "s_client -tls1 -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}
	
	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Protocol  : TLSv1\n")){
		log.info("TLS 1 negotiated");
	} else {
		testRunner.fail( "TLS 1 not negotiated" );
	}


	return;
	
	</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="[TR_TC016] Verify that the Third Party maintains an unexpired unrevoked RSA certificate with a public key length of at least 2048 bits">
				<con:settings/>
				<con:config>
					<script>import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File;

	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	def config = new ConfigSlurper().parse(new File(groovyUtils.projectPath + "/etc/gbcmd.conf").toURL());

	def cmdSubString = "s_client -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort}";
	def command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	
	log.info ("Executing: ${command}");
	def proc = command.execute();
	proc.waitFor();
	

	String strResult = proc.text;
		
	if(strResult.contains("Server public key is 2048 bit")){
		log.info("Server public key is 2048 bit");
	} else {
		testRunner.fail( "Server public key is not 2048 bit" );
		return;
	}

	// check if certificate is expired
	// get certificate
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${groovyUtils.projectPath}\\etc\\getcert.bat ${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl s_client -connect ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${groovyUtils.projectPath}/etc/getcert.pem";

		}
	} else {
		// linux or OS X
		//command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
		command = "${groovyUtils.projectPath}/etc/getcert.sh ${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${config.ThirdPartyHostName}:${config.ThirdPartySSLPort} ${groovyUtils.projectPath}/etc/getcert.pem";
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;


	cmdSubString = "x509 -noout -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;
		
	
	strNotBefore = strResult.substring(strResult.indexOf("notBefore=") + "notBefore=".length(),strResult.indexOf(" GMT",strResult.indexOf("notBefore=")));
	strNotAfter = strResult.substring(strResult.indexOf("notAfter=") + "notAfter=".length(),strResult.indexOf(" GMT",strResult.indexOf("notAfter=")));

	Calendar cal = Calendar.getInstance();
	
	DateFormat df = new SimpleDateFormat ("MMM dd HH:mm:ss yyyy z");
	Date dNB = df.parse(strNotBefore + " GMT");
	Date dNA = df.parse(strNotAfter + " GMT");
	
	Date now = new Date();
	String datetimeStr = now.toString();
	
	if(now.after(dNB) &amp;&amp; now.before(dNA)) {
		log.info("Certificate has not expired");
	} else {
		testRunner.fail("Certificate has expired");

		try{
		 
			File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
			file.delete();
		
		} catch(Exception e) {
		
			log.error("Error deleing temp file:" + e.getMessage());
		}	
			
		return;
	}

	// check if RSA
	cmdSubString = "x509 -text -in ${groovyUtils.projectPath}/etc/getcert.pem -dates";
	command;
	if((config.cygwinHome)) {
		if(config.cygwinHome.length()>0) {
			// on windows with cygwin
			//log.info("windows");
			command = "${config.cygwinHome}/timeout ${config.securityTimeout} ${config.cygwinHome}/openssl ${cmdSubString}";
		}
	} else {
		// linux or OS X
		command = """${groovyUtils.projectPath}/etc/timeout.sh -t ${config.securityTimeout} ${config.openSSLCommand} ${cmdSubString}""";	
	}

	log.info ("Executing: ${command}");
	proc = command.execute();
	proc.waitFor();
	

	strResult = proc.text;

	if(strResult.contains("Public Key Algorithm: rsaEncryption")){
		log.info("Public Key Algorithm: rsaEncryption");
	} else {
		testRunner.fail("Certificate does not use rsaEncryption");
	}
	

	try{
	 
		File file = new File("${groovyUtils.projectPath}/etc/getcert.pem");
		file.delete();
	
	} catch(Exception e) {
	
		log.error("Error deleing temp file:" + e.getMessage());
	}	

	

	return;

	
	</script>
				</con:config>
			</con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_14] Authorization and Authentication"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_14] Authorization and Authentication" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Scenario: Retail Customer views Data Custodian list">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);
//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer views Data Custodian list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I navigate to Data Custodian list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see a list of Data Custodians");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("data_custodian");

} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Data Custodian for the list">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{

	//*********************************************************
	log.info("Scenario: Retail Customer selects Data Custodian for the list");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
        
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer selects Scope">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");

DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer selects Scope");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");


	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
		
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();

	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();	
	driver.findElement(By.name("Data_custodian")).click();	
	driver.findElement(By.name("next")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:testStep type="groovy" name="Scenario: Retail Customer authorizes Third Party">
				<con:settings/>
				<con:config>
					<script>import org.openqa.selenium.*;
import org.greenbutton.cmd.utils.DriverHelper;

def project = testRunner.testCase.testSuite.project
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def BaseURL = project.getPropertyValue("BaseURL")
def DataCustodianContext = project.getPropertyValue("DataCustodianContext")
def ThirdPartyContext = project.getPropertyValue("ThirdPartyContext")
def ServiceEndpointDataCustodian = BaseURL + "/" + DataCustodianContext
def ServiceEndpointThirdParty = BaseURL + "/" + ThirdPartyContext;
def TestManager=project.getPropertyValue("TestManager")
def TestManagerPW=project.getPropertyValue("TestManagerPW")
def TestRetailCustomer=project.getPropertyValue("TestRetailCustomer")
def TestRetailCustomerPW=project.getPropertyValue("TestRetailCustomerPW")
def TestFile=(new File(projectPath + "/../data/" + project.getPropertyValue("TestFile"))).getAbsolutePath();
def usagePointUUID1 = project.getPropertyValue("usagePointUUID1");
def usagePointDescription1 = project.getPropertyValue("usagePointDescription1");


DriverHelper driver = new DriverHelper(BaseURL,DataCustodianContext,ThirdPartyContext,log);

//driver._bLogActions = true;

try{
	
	//*********************************************************
	log.info("Scenario: Retail Customer authorizes Third Party");
	//*********************************************************
	// reset DB : run library groovy script
	testRunner.runTestStep(testRunner.testCase.testSuite.project.testSuites['Library'].testCases['GeneralScripts'].testSteps['resetDB']);
	// Browser Init
	driver.Before();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Given a Retail Customer with Usage Points");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.login(ServiceEndpointDataCustodian,TestManager,TestManagerPW);
	driver.assertUrlContains("/" + DataCustodianContext + "/custodian/home");

	// upload usage point file
	driver.findElement(By.linkText("Upload")).click();	
	driver.findElement(By.name("file")).sendKeys(TestFile);
		
	driver.findElement(By.name("upload")).click();	
	driver.assertDoesNotContain("Unable to process file");
	
	// add usage point linkage
	driver.findElement(By.linkText("Customer List")).click();
	driver.findElement(By.linkText(TestRetailCustomer)).click();	
	driver.findElement(By.partialLinkText("Add Usage")).click();	
	driver.findElement(By.id("UUID")).clear();
	driver.findElement(By.id("UUID")).sendKeys(usagePointUUID1);
	driver.findElement(By.name("create")).click();


	driver.logout(ServiceEndpointDataCustodian);
	
	driver.login(ServiceEndpointThirdParty,TestRetailCustomer,TestRetailCustomerPW);	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select a Data Custodian from the list");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.linkText("Data Custodians")).click();
	driver.findElement(By.name("Data_custodian")).click();
	driver.findElement(By.name("next")).click();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see the Data Custodian login screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertUrlContains("/DataCustodian");
	driver.assertContains("Login");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I log into Data Custodian");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.name("j_username")).clear();
	driver.findElement(By.name("j_username")).sendKeys(TestRetailCustomer);	
	driver.findElement(By.name("j_password")).clear();
	driver.findElement(By.name("j_password")).sendKeys(TestRetailCustomerPW);	
	driver.findElement(By.name("submit")).click();
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see Scope selection screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Select Scope");
	driver.assertContains("FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I select Scopes");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.findElement(By.className("scope")).click();	
	driver.findElement(By.xpath("(//input[@name='scope'])[2]")).click();	
	driver.findElement(By.name("next")).click();	
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see authorization screen");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Please Confirm");
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("When I authorize Third Party");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//driver.findElement(By.name("authorize")).click();
	driver.findElement(By.name("scope.FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13")).click();
	driver.findElement(By.name("authorize")).click();
			
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.logStep("Then I should see all my authorizations");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	driver.assertContains("Authorizations");
	driver.assertContains("data_custodian");
	driver.assertContains("DataCustodian/espi/1_1/resource/Batch/Subscription/");
	
} catch(Exception e) {
	testRunner.fail(driver.getErrorString())
}

//Close the browser
driver.quit();
</script>
				</con:config>
			</con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_19] Partial Update Data"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_19] Partial Update Data" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_33] DataCustodian Management Interface"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_33] DataCustodian Management Interface" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Feature: DC Admin Access"><con:settings/><con:config><script>//******************************************************************************************************************
//******************************************************************************************************************
log.info("Feature: DC Admin Access");
//******************************************************************************************************************
//******************************************************************************************************************
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="FB_34] SFTP for Bulk"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite>
<con:testSuite name="[FB_35] REST for Bulk"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite>
<con:testSuite name="[FB_37] Query Parameters"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_37] Query Parameters" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_39] PUSH Model"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="[FB_39] PUSH Model" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:testSuite name="[FB_40] Offline Authorization"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite>
	<con:testSuite name="[FB_44] Manage ApplicationInformation Resource"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite>
	<con:testSuite name="[FB_41] Manage  Authorization Resource"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:properties>
		<con:property>
			<con:name>BaseURL</con:name>
			<con:value>http://localhost:8080</con:value>
		</con:property>
		<con:property>
			<con:name>ServiceEndpoint</con:name>
			<con:value>http://localhost:8080/DataCustodian</con:value>
		</con:property>
		<con:property>
			<con:name>DataCustodianContext</con:name>
			<con:value>DataCustodian</con:value>
		</con:property>
		<con:property>
			<con:name>ThirdPartyContext</con:name>
			<con:value>ThirdParty</con:value>
		</con:property>
		<con:property>
			<con:name>linkPrefixForReplace</con:name>
			<con:value>http://localhost:8080/DataCustodian/</con:value>
		</con:property>
		<con:property>
			<con:name>HomePageURLEndpoint</con:name>
			<con:value>https://services.greenbuttondata.org</con:value>
		</con:property>
		
		<con:property>
			<con:name>TestManager</con:name>
			<con:value>grace</con:value>
		</con:property>
		<con:property>
			<con:name>TestManagerPW</con:name>
			<con:value>koala</con:value>
		</con:property>
		<con:property>
			<con:name>TestRetailCustomer</con:name>
			<con:value>alan</con:value>
		</con:property>
		<con:property>
			<con:name>TestRetailCustomerPW</con:name>
			<con:value>koala</con:value>
		</con:property>
		<con:property>
			<con:name>retailCustomerId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property>
			<con:name>usagePointId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property>
			<con:name>resourceId</con:name>
			<con:value>01</con:value>
		</con:property>
		<con:property>
			<con:name>meterReadingId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property>
			<con:name>readingTypeId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property>
			<con:name>intervalBlockId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property>
			<con:name>electricPowerQualitySummaryId</con:name>
			<con:value>1</con:value>
		</con:property>
		<con:property><con:name>electricPowerUsageSummaryId</con:name><con:value>1</con:value></con:property><con:property><con:name>subscriptionId</con:name><con:value>1</con:value></con:property><con:property><con:name>applicationInformationId</con:name><con:value>1</con:value></con:property><con:property><con:name>authorizationId</con:name><con:value>1</con:value></con:property><con:property><con:name>bulkId</con:name><con:value>1</con:value></con:property><con:property><con:name>localTimeParametersId</con:name><con:value>1</con:value></con:property><con:property>
			<con:name>TestFile</con:name>
			<con:value>test_usage_data.xml</con:value>
		</con:property>
		<con:property>
			<con:name>usagePointUUID1</con:name>
			<con:value>48C2A019-5598-4E16-B0F9-49E4FF27F5FB</con:value>
		</con:property>
		<con:property>
			<con:name>usagePointDescription1</con:name>
			<con:value>Front Electric Meter</con:value>
		</con:property>
		<con:property>
			<con:name>TestFile2</con:name>
			<con:value>Gas.xml</con:value>
		</con:property>
		<con:property>
			<con:name>usagePointUUID2</con:name>
			<con:value>642EABA-8E42-4D1A-A375-AF54993C007B</con:value>
		</con:property>
		<con:property>
			<con:name>usagePointDescription2</con:name>
			<con:value>Gas</con:value>
		</con:property>
		<con:property>
			<con:name>DBprepopulateScriptName</con:name>
			<con:value>prepopulatesql_dc.sql</con:value>
		</con:property>
		
		
		
		
		
		
		<con:property>
			<con:name>data_custodian_access_token</con:name>
			<con:value>688b026c-665f-4994-9139-6b21b13fbeee</con:value>
		</con:property>
		<con:property>
			<con:name>third_party_access_token</con:name>
			<con:value>75dd9c46-becf-48b5-9cb5-9c3233d718d0</con:value>
		</con:property>
		<con:property>
			<con:name>upload_access_token</con:name>
			<con:value>809caf03-612e-4e89-94b1-6f86d83b1ef8</con:value>
		</con:property>
		<con:property>
			<con:name>userAccessToken1</con:name>
			<con:value>54ac2de2-7454-4316-8d83-6f1fb852ffc4</con:value>
		</con:property>
		<con:property>
			<con:name>userAccessToken2</con:name>
			<con:value>89f67a18-99cc-42e6-9e3c-90993dcea147</con:value>
		</con:property>
		<con:property>
			<con:name>registration_third_party_access_token</con:name>
			<con:value>d89bb056-0f02-4d47-9fd2-ec6a19ba8d0c</con:value>
		</con:property>
		<con:property><con:name>mysqlCmdDC</con:name><con:value>mysql --user=root --password=password</con:value></con:property><con:property><con:name>mysqlCmdTP</con:name><con:value>mysql --user=root --password=password</con:value></con:property><con:property>
			<con:name>opensslCmd</con:name>
			<con:value>openssl</con:value>
		</con:property>
		<con:property>
			<con:name>timeoutCmd</con:name>
			<con:value>timeout</con:value>
		</con:property>
	<con:property><con:name>client_id</con:name><con:value>test_third_party</con:value></con:property><con:property><con:name>redirect_uri</con:name><con:value>http://localhost:8080/ThirdParty/espi/1_1/OAuthCallBack</con:value></con:property><con:property><con:name>scope</con:name><con:value>FB=4_5_15;IntervalDuration=3600;BlockDuration=monthly;HistoryLength=13</con:value></con:property><con:property><con:name>state</con:name><con:value>abcdef12345</con:value></con:property><con:property><con:name>dataCustodianResourceUri</con:name><con:value>https://localhost/DataCustodian/espi/1_1/resource</con:value></con:property><con:property><con:name>resourceUri</con:name><con:value>espi/1_1/resource/</con:value></con:property><con:property><con:name>dataCustodianResourceEndpoint</con:name><con:value>http://localhost:8080/DataCustodian/espi/1_1/resource/</con:value></con:property><con:property><con:name>dataCustodianId</con:name><con:value>data_custodian</con:value></con:property><con:property><con:name>federalEIN</con:name><con:value>123456</con:value></con:property><con:property><con:name>registration_access_token</con:name><con:value>1</con:value></con:property><con:property><con:name>client_access_token</con:name><con:value>1</con:value></con:property></con:properties>
	<con:wssContainer/>
	<con:oAuth2ProfileContainer/>
	<con:sensitiveInformation/>
</con:soapui-project>